#!/usr/bin/env python
"""
Usage: iterm [-i] [-W] [-w] [-x] [COMMAND [ARGUMENT]...]

Launch an iTerm2 window using the default profile. The default profile's launch
command may be overridden by specifying an alternative command the argument to
this script.

Options:
  --help, -h, -V
            Show this text and exit.

  -i        Ignore environment variables; do not pass environment variables to
            the iTerm2 subprocess.
  -n        Print the generated AppleScript program instead of executing it.
  -W        Wait for user input before closing iTerm2 after executing a
            command.
  -w        Wait for user input before closing iTerm2 after executing a
            command, but only if the command failed (finished with a non-zero
            exit status).
  -x        Let iTerm2 exit immediately after executing a command. This is the
            default behavior.
"""
from __future__ import print_function

import errno
import getopt
import os
import pipes
import sys

SELF = os.path.basename(__file__)

WAIT_NEVER = 0
WAIT_ALWAYS = 1
WAIT_ON_ERROR = 2


def iterm2_launcher_applescript(argv=None):
    """
    Generate an AppleScript program to launch iTerm2.

    Arguments:
    - argv: Optional command and arguments to execute. If this is unspecified,
      iTerm2 is launched using the command associated with the default profile.

    Returns: A string.
    """
    if argv:
        # Convert a command and its arguments to an infix that can be used in
        # AppleScript to run the command with iTerm2. This entails escaping
        # single quotes, double quotes and backslashes in each argument with
        # varying number of slashes then enclosing each escaped argument with
        # single quotes and, finally, enclosing the concatenated escaped
        # arguments with double quotes.
        parts = list()

        for argument in argv:
            parts.append(
                "'" +
                argument.replace("\\", "\\\\\\\\")
                        .replace("'", "\\\\'")
                        .replace('"', '\\"')
                + "'"
            )

        infix = 'command "%s"' % " ".join(parts)
    else:
        infix = ""

    return (
        "tell application \"iTerm2\"\n"
        "    create window with default profile %s\n"
        "end tell\n" % infix
    )


def usage():
    """
    Print script documentation.
    """
    print(__doc__.strip())


def main(argv):
    try:
        options, args = getopt.getopt(argv, "hinVWwx", ["help"])
    except getopt.GetoptError as error:
        print('%s: %s; try "%s --help"' % (SELF, error, SELF), file=sys.stderr)
        return 1

    preserve_env = True
    dry_run = False
    wait_mode = WAIT_NEVER

    for option, value in options:
        if option == "-i":
            preserve_env = False
        elif option == "-n":
            dry_run = True
        elif option == "-W":
            wait_mode = WAIT_ALWAYS
        elif option == "-w":
            wait_mode = WAIT_ON_ERROR
        elif option == "-x":
            wait_mode = WAIT_NEVER
        elif option in ("-h", "-V", "--help"):
            usage()
            return

    if args:
        if preserve_env:
            env_argv = ["env"]

            for name, value in os.environ.items():
                env_argv.append("%s=%s" % (name, value))

            args = env_argv + args

        if wait_mode != WAIT_NEVER:
            if wait_mode == WAIT_ON_ERROR:
                success_command = "exit"
            else:
                success_command = "exit_status=0"

            script = (
                'command -- %s && %s || exit_status="$?"\n'
                'tput bold\n'
                'tput setaf "$((exit_status ? 1 : 2))"\n'
                'echo "(\$?=$exit_status)"\n'
                'tput sgr0\n'
                'read -n 1 -s\n'
                % (" ".join(map(pipes.quote, args)), success_command)
            )
            args = ["bash", "-c", script]

    script = iterm2_launcher_applescript(args)

    if not dry_run:
        try:
            os.execvp("osascript", ["osascript", "-e", script])
        except OSError as error:
            if error.errno != errno.ENOENT:
                raise

            print("%s: osascript: command not found" % SELF, file=sys.stderr)
            return 1

    print(script.rstrip())


if __name__ == "__main__":
    sys.exit(main(sys.argv[1:]))
