Add support for a new option, "--almost-all-if-not-home", that implicitly shows
dotfiles for every directory except `$HOME`.

--- src/ls.c	2024-03-26 13:57:27.000000000 -0500
+++ src/ls.c	2025-06-05 01:28:37.980026746 -0500
@@ -261,7 +261,7 @@
                               int needs_general_quoting, size_t *width,
                               bool *pad);
 static int decode_switches (int argc, char **argv);
-static bool file_ignored (char const *name);
+static bool file_ignored (bool is_home, char const *name);
 static uintmax_t gobble_file (char const *name, enum filetype type,
                               ino_t inode, bool command_line_arg,
                               char const *dirname);
@@ -382,6 +382,10 @@
 
 static struct pending *pending_dirs;
 
+// This is used to store the stat information of the user's home directory
+// which will be used to determine when its contents are being listed.
+static struct stat homedir_stat;
+
 /* Current time in seconds and nanoseconds since 1970, updated as
    needed when deciding whether a file is recent.  */
 
@@ -687,7 +691,11 @@
   IGNORE_DOT_AND_DOTDOT,
 
   /* Ignore only files specified by --ignore.  */
-  IGNORE_MINIMAL
+  IGNORE_MINIMAL,
+
+  /* Acts like IGNORE_DOT_AND_DOTDOT for all directories other than
+     $HOME where it acts like IGNORE_DEFAULT. */
+  IGNORE_ALMOST_ALL_IF_NOT_HOME
 } ignore_mode;
 
 /* A linked list of shell-style globbing patterns.  If a non-argument
@@ -843,6 +851,7 @@
   TIME_OPTION,
   TIME_STYLE_OPTION,
   ZERO_OPTION,
+  ALMOST_ALL_IF_NOT_HOME
 };
 
 static struct option const long_options[] =
@@ -891,6 +900,7 @@
   {"block-size", required_argument, nullptr, BLOCK_SIZE_OPTION},
   {"context", no_argument, 0, 'Z'},
   {"author", no_argument, nullptr, AUTHOR_OPTION},
+  {"almost-all-if-not-home", no_argument, NULL, ALMOST_ALL_IF_NOT_HOME},
   {GETOPT_HELP_OPTION_DECL},
   {GETOPT_VERSION_OPTION_DECL},
   {nullptr, 0, nullptr, 0}
@@ -1794,6 +1804,9 @@
   else if (n_files <= 1 && pending_dirs && pending_dirs->next == 0)
     print_dir_name = false;
 
+  if (ignore_mode != IGNORE_ALMOST_ALL_IF_NOT_HOME || !getenv("HOME") || stat(getenv("HOME"), &homedir_stat) < 0)
+    homedir_stat.st_dev = homedir_stat.st_ino = 0;
+
   while (pending_dirs)
     {
       thispend = pending_dirs;
@@ -2243,6 +2256,10 @@
           quoting_style_opt = literal_quoting_style;
           break;
 
+        case ALMOST_ALL_IF_NOT_HOME:
+          ignore_mode = IGNORE_ALMOST_ALL_IF_NOT_HOME;
+          break;
+
         case_GETOPT_HELP_CHAR;
 
         case_GETOPT_VERSION_CHAR (PROGRAM_NAME, AUTHORS);
@@ -2997,22 +3014,25 @@
       return;
     }
 
-  if (LOOP_DETECT)
-    {
-      struct stat dir_stat;
-      int fd = dirfd (dirp);
+  struct stat dir_stat;
+  int fd = dirfd (dirp);
 
-      /* If dirfd failed, endure the overhead of stat'ing by path  */
-      if ((0 <= fd
-           ? fstat_for_ino (fd, &dir_stat)
-           : stat_for_ino (name, &dir_stat)) < 0)
-        {
-          file_failure (command_line_arg,
-                        _("cannot determine device and inode of %s"), name);
-          closedir (dirp);
-          return;
-        }
+  /* If dirfd failed, endure the overhead of stat'ing by path  */
+  if ((0 <= fd
+       ? fstat_for_ino (fd, &dir_stat)
+       : stat_for_ino (name, &dir_stat)) < 0)
+    {
+      file_failure (command_line_arg,
+                    _("cannot determine device and inode of %s"), name);
+      closedir (dirp);
+      return;
+    }
+
+  bool is_home = (dir_stat.st_ino == homedir_stat.st_ino &&
+                  dir_stat.st_dev == homedir_stat.st_dev);
 
+  if (LOOP_DETECT)
+    {
       /* If we've already visited this dev/inode pair, warn that
          we've found a loop, and do not process this directory.  */
       if (visit_dir (dir_stat.st_dev, dir_stat.st_ino))
@@ -3066,7 +3086,7 @@
         errno = 0;
       if (next)
         {
-          if (! file_ignored (next->d_name))
+          if (! file_ignored (is_home, next->d_name))
             {
               enum filetype type = unknown;
 
@@ -3182,12 +3202,17 @@
 /* Return true if FILE should be ignored.  */
 
 static bool
-file_ignored (char const *name)
+file_ignored (bool is_home, char const *name)
 {
-  return ((ignore_mode != IGNORE_MINIMAL
+  int local_mode = ignore_mode;
+
+  if (ignore_mode == IGNORE_ALMOST_ALL_IF_NOT_HOME)
+    local_mode = is_home ? IGNORE_DEFAULT : IGNORE_DOT_AND_DOTDOT;
+
+  return ((local_mode != IGNORE_MINIMAL
            && name[0] == '.'
-           && (ignore_mode == IGNORE_DEFAULT || ! name[1 + (name[1] == '.')]))
-          || (ignore_mode == IGNORE_DEFAULT
+           && (local_mode == IGNORE_DEFAULT || ! name[1 + (name[1] == '.')]))
+          || (local_mode == IGNORE_DEFAULT
               && patterns_match (hide_patterns, name))
           || patterns_match (ignore_patterns, name));
 }
