Title: Font Array Support
Author: Eric Pruitt (https://www.codevat.com/, https://github.com/ericpruitt/)

Modifies st to support user-defined fallback fonts specified in a NULL
terminated array defined as `const char *fonts[]`. This change also resolves an
issue where fallback fonts were used in place of default fonts in an
inconsistent manner which caused identical sets of text to sometimes use
different fonts. In the following example, DejaVu Sans Mono is the primary font
with two others specified as fallbacks:

    const char *fonts[] = {
        "DejaVu Sans Mono",
        "VL Gothic",
        "WenQuanYi Micro Hei",
        NULL
    };

diff --git st.h st.h
index 44d4938..d52c1c2 100644
--- st.h
+++ st.h
@@ -237,7 +237,7 @@ extern double usedfontsize;
 extern double defaultfontsize;
 
 /* config.h globals */
-extern char font[];
+extern const char *fonts[];
 extern int borderpx;
 extern float cwscale;
 extern float chscale;
diff --git win.h win.h
index 428111c..bd6cda9 100644
--- win.h
+++ win.h
@@ -18,7 +18,7 @@ void xhints(void);
 void xinit(void);
 void xloadcols(void);
 int xsetcolorname(int, const char *);
-void xloadfonts(char *, double);
+void xloadfonts(const char *, double);
 void xsetenv(void);
 void xsettitle(char *);
 void xsetpointermotion(int);
diff --git x.c x.c
index 191e5dc..63d0f18 100644
--- x.c
+++ x.c
@@ -72,11 +72,18 @@ typedef struct {
 	FcPattern *pattern;
 } Font;
 
+typedef struct {
+	Font font;
+	Font bfont;
+	Font ifont;
+	Font ibfont;
+} FontFamily;
+
 /* Drawing Context */
 typedef struct {
 	Color *col;
 	size_t collen;
-	Font font, bfont, ifont, ibfont;
+	FontFamily fontfamily;
 	GC gc;
 } DC;
 
@@ -140,6 +147,10 @@ static DC dc;
 static XWindow xw;
 static XSelection xsel;
 
+static FontFamily EmptyFontFamily;
+static FontFamily fontfamilies[16];
+static int fontfamiliescount = 0;
+
 /* Font Ring Cache */
 enum {
 	FRC_NORMAL,
@@ -774,11 +785,16 @@ xloadfont(Font *f, FcPattern *pattern)
 }
 
 void
-xloadfonts(char *fontstr, double fontsize)
+xloadfonts(const char *fontstr, double fontsize)
 {
 	FcPattern *pattern;
 	double fontval;
 	float ceilf(float);
+	FontFamily fontfamily = EmptyFontFamily;
+
+	if (fontfamiliescount >= LEN(fontfamilies)) {
+		die("Font family array is full.\n");
+	}
 
 	if (fontstr[0] == '-') {
 		pattern = XftXlfdParse(fontstr, False, False);
@@ -812,37 +828,43 @@ xloadfonts(char *fontstr, double fontsize)
 		defaultfontsize = usedfontsize;
 	}
 
-	if (xloadfont(&dc.font, pattern))
+	if (xloadfont(&fontfamily.font, pattern))
 		die("st: can't open font %s\n", fontstr);
 
 	if (usedfontsize < 0) {
-		FcPatternGetDouble(dc.font.match->pattern,
+		FcPatternGetDouble(fontfamily.font.match->pattern,
 		                   FC_PIXEL_SIZE, 0, &fontval);
 		usedfontsize = fontval;
 		if (fontsize == 0)
 			defaultfontsize = fontval;
 	}
 
-	/* Setting character width and height. */
-	win.cw = ceilf(dc.font.width * cwscale);
-	win.ch = ceilf(dc.font.height * chscale);
-
 	FcPatternDel(pattern, FC_SLANT);
 	FcPatternAddInteger(pattern, FC_SLANT, FC_SLANT_ITALIC);
-	if (xloadfont(&dc.ifont, pattern))
+	if (xloadfont(&fontfamily.ifont, pattern))
 		die("st: can't open font %s\n", fontstr);
 
 	FcPatternDel(pattern, FC_WEIGHT);
 	FcPatternAddInteger(pattern, FC_WEIGHT, FC_WEIGHT_BOLD);
-	if (xloadfont(&dc.ibfont, pattern))
+	if (xloadfont(&fontfamily.ibfont, pattern))
 		die("st: can't open font %s\n", fontstr);
 
 	FcPatternDel(pattern, FC_SLANT);
 	FcPatternAddInteger(pattern, FC_SLANT, FC_SLANT_ROMAN);
-	if (xloadfont(&dc.bfont, pattern))
+	if (xloadfont(&fontfamily.bfont, pattern))
 		die("st: can't open font %s\n", fontstr);
 
 	FcPatternDestroy(pattern);
+
+	/* Setting character width and height. */
+	if (!fontfamiliescount) {
+		win.cw = ceilf(fontfamily.font.width * cwscale);
+		win.ch = ceilf(fontfamily.font.height * chscale);
+		dc.fontfamily = fontfamily;
+		usedfont = (char *) fontstr;
+	}
+
+	fontfamilies[fontfamiliescount++] = fontfamily;
 }
 
 void
@@ -861,15 +883,20 @@ xunloadfonts(void)
 	while (frclen > 0)
 		XftFontClose(xw.dpy, frc[--frclen].font);
 
-	xunloadfont(&dc.font);
-	xunloadfont(&dc.bfont);
-	xunloadfont(&dc.ifont);
-	xunloadfont(&dc.ibfont);
+	while (fontfamiliescount > 0) {
+		fontfamiliescount--;
+		xunloadfont(&fontfamilies[fontfamiliescount].font);
+		xunloadfont(&fontfamilies[fontfamiliescount].bfont);
+		xunloadfont(&fontfamilies[fontfamiliescount].ifont);
+		xunloadfont(&fontfamilies[fontfamiliescount].ibfont);
+	}
 }
 
 void
 xinit(void)
 {
+	int i;
+
 	XGCValues gcvalues;
 	Cursor cursor;
 	Window parent;
@@ -885,8 +912,13 @@ xinit(void)
 	if (!FcInit())
 		die("Could not init fontconfig.\n");
 
-	usedfont = (opt_font == NULL)? font : opt_font;
-	xloadfonts(usedfont, 0);
+	if (opt_font) {
+		xloadfonts(opt_font, 0);
+	}
+
+	for (i = 0; fonts[i]; i++) {
+		xloadfonts(fonts[i], 0);
+	}
 
 	/* colors */
 	xw.cmap = XDefaultColormap(xw.dpy, xw.scr);
@@ -986,9 +1018,9 @@ xinit(void)
 int
 xmakeglyphfontspecs(XftGlyphFontSpec *specs, const Glyph *glyphs, int len, int x, int y)
 {
-	float winx = borderpx + x * win.cw, winy = borderpx + y * win.ch, xp, yp;
-	ushort mode, prevmode = USHRT_MAX;
-	Font *font = &dc.font;
+	float winx = borderpx + x * win.cw, winy = borderpx + y * win.ch, xp;
+	ushort mode;
+	Font *font, *reference = NULL;
 	int frcflags = FRC_NORMAL;
 	float runewidth = win.cw;
 	Rune rune;
@@ -999,7 +1031,7 @@ xmakeglyphfontspecs(XftGlyphFontSpec *specs, const Glyph *glyphs, int len, int x
 	FcCharSet *fccharset;
 	int i, f, numspecs = 0;
 
-	for (i = 0, xp = winx, yp = winy + font->ascent; i < len; ++i) {
+	for (i = 0, xp = winx; i < len; ++i) {
 		/* Fetch rune and mode for current glyph. */
 		rune = glyphs[i].u;
 		mode = glyphs[i].mode;
@@ -1008,32 +1040,33 @@ xmakeglyphfontspecs(XftGlyphFontSpec *specs, const Glyph *glyphs, int len, int x
 		if (mode == ATTR_WDUMMY)
 			continue;
 
-		/* Determine font for glyph if different from previous glyph. */
-		if (prevmode != mode) {
-			prevmode = mode;
-			font = &dc.font;
+		/* Lookup character index within user-defined fonts. */
+		for (glyphidx = 0, f = 0; f < fontfamiliescount && !glyphidx; f++) {
+			font = &fontfamilies[f].font;
 			frcflags = FRC_NORMAL;
 			runewidth = win.cw * ((mode & ATTR_WIDE) ? 2.0f : 1.0f);
 			if ((mode & ATTR_ITALIC) && (mode & ATTR_BOLD)) {
-				font = &dc.ibfont;
+				font = &fontfamilies[f].ibfont;
 				frcflags = FRC_ITALICBOLD;
 			} else if (mode & ATTR_ITALIC) {
-				font = &dc.ifont;
+				font = &fontfamilies[f].ifont;
 				frcflags = FRC_ITALIC;
 			} else if (mode & ATTR_BOLD) {
-				font = &dc.bfont;
+				font = &fontfamilies[f].bfont;
 				frcflags = FRC_BOLD;
 			}
-			yp = winy + font->ascent;
+
+			if (!f) {
+				reference = font;
+			}
+			glyphidx = XftCharIndex(xw.dpy, font->match, rune);
 		}
 
-		/* Lookup character index with default font. */
-		glyphidx = XftCharIndex(xw.dpy, font->match, rune);
 		if (glyphidx) {
 			specs[numspecs].font = font->match;
 			specs[numspecs].glyph = glyphidx;
 			specs[numspecs].x = (short)xp;
-			specs[numspecs].y = (short)yp;
+			specs[numspecs].y = (short) (winy + font->ascent);
 			xp += runewidth;
 			numspecs++;
 			continue;
@@ -1052,12 +1085,14 @@ xmakeglyphfontspecs(XftGlyphFontSpec *specs, const Glyph *glyphs, int len, int x
 			}
 		}
 
-		/* Nothing was found. Use fontconfig to find matching font. */
+		/* Nothing was found. Use fontconfig to find matching font using the
+		 * default font as the reference font.
+		 */
 		if (f >= frclen) {
-			if (!font->set)
-				font->set = FcFontSort(0, font->pattern,
-				                       1, 0, &fcres);
-			fcsets[0] = font->set;
+			if (!reference->set)
+				reference->set = FcFontSort(0, reference->pattern,
+				                            1, 0, &fcres);
+			fcsets[0] = reference->set;
 
 			/*
 			 * Nothing was found in the cache. Now use
@@ -1066,7 +1101,7 @@ xmakeglyphfontspecs(XftGlyphFontSpec *specs, const Glyph *glyphs, int len, int x
 			 *
 			 * Xft and fontconfig are design failures.
 			 */
-			fcpattern = FcPatternDuplicate(font->pattern);
+			fcpattern = FcPatternDuplicate(reference->pattern);
 			fccharset = FcCharSetCreate();
 
 			FcCharSetAddChar(fccharset, rune);
@@ -1110,7 +1145,7 @@ xmakeglyphfontspecs(XftGlyphFontSpec *specs, const Glyph *glyphs, int len, int x
 		specs[numspecs].font = frc[f].font;
 		specs[numspecs].glyph = glyphidx;
 		specs[numspecs].x = (short)xp;
-		specs[numspecs].y = (short)yp;
+		specs[numspecs].y = (short) (winy + frc[f].font->ascent);
 		xp += runewidth;
 		numspecs++;
 	}
@@ -1130,10 +1165,10 @@ xdrawglyphfontspecs(const XftGlyphFontSpec *specs, Glyph base, int len, int x, i
 
 	/* Fallback on color display for attributes not supported by the font */
 	if (base.mode & ATTR_ITALIC && base.mode & ATTR_BOLD) {
-		if (dc.ibfont.badslant || dc.ibfont.badweight)
+		if (dc.fontfamily.ibfont.badslant || dc.fontfamily.ibfont.badweight)
 			base.fg = defaultattr;
-	} else if ((base.mode & ATTR_ITALIC && dc.ifont.badslant) ||
-	    (base.mode & ATTR_BOLD && dc.bfont.badweight)) {
+	} else if ((base.mode & ATTR_ITALIC && dc.fontfamily.ifont.badslant) ||
+	    (base.mode & ATTR_BOLD && dc.fontfamily.bfont.badweight)) {
 		base.fg = defaultattr;
 	}
 
@@ -1238,12 +1273,12 @@ xdrawglyphfontspecs(const XftGlyphFontSpec *specs, Glyph base, int len, int x, i
 
 	/* Render underline and strikethrough. */
 	if (base.mode & ATTR_UNDERLINE) {
-		XftDrawRect(xw.draw, fg, winx, winy + dc.font.ascent + 1,
+		XftDrawRect(xw.draw, fg, winx, winy + dc.fontfamily.font.ascent + 1,
 				width, 1);
 	}
 
 	if (base.mode & ATTR_STRUCK) {
-		XftDrawRect(xw.draw, fg, winx, winy + 2 * dc.font.ascent / 3,
+		XftDrawRect(xw.draw, fg, winx, winy + 2 * dc.fontfamily.font.ascent / 3,
 				width, 1);
 	}
 
