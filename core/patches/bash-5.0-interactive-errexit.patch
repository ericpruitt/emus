If errexit is enabled for an interactive session, drop the user back at a
prompt instead of exiting when a command fails.

This code has a bug in function handling that indicates there's probably some
kind of resource leak; running `x() { echo ${FUNCNAME[@]}; false; }; x`
repeatedly with "errexit" set results in `${FUNCNAME[@]}` getting longer:

    ~$ x() { echo ${FUNCNAME[@]}; false; }; x
    x
    (1)
    ~$ x() { echo ${FUNCNAME[@]}; false; }; x
    x x
    (1)
    ~$ x() { echo ${FUNCNAME[@]}; false; }; x
    x x x
    (1)

--- eval.c	2019-09-08 14:19:29.917655373 -0700
+++ eval.c	2019-09-08 14:45:39.579411490 -0700
@@ -110,7 +110,8 @@
 	      current_command = (COMMAND *)NULL;
 	      if (exit_immediately_on_error)
 		variable_context = 0;	/* not in a function */
-	      EOF_Reached = EOF;
+	      if (code != ERREXIT || (exit_immediately_on_error && !interactive_shell))
+		EOF_Reached = EOF;
 	      goto exec_done;
 
 	    case DISCARD:
--- error.c	2019-09-07 19:55:02.390710966 -0700
+++ error.c	2019-09-07 19:54:31.983528264 -0700
@@ -357,7 +357,7 @@
 
   va_end (args);
 
-  if (exit_immediately_on_error)
+  if (exit_immediately_on_error && !interactive_shell)
     exit_shell (last_command_exit_value = 2);
 }
 
--- error.c	2019-09-08 14:00:14.392805428 -0700
+++ error.c	2019-09-08 14:00:17.064733443 -0700
@@ -198,7 +198,7 @@
   fprintf (stderr, "\n");
 
   va_end (args);
-  if (exit_immediately_on_error)
+  if (exit_immediately_on_error && !interactive_shell)
     {
       if (last_command_exit_value == 0)
 	last_command_exit_value = 1;
