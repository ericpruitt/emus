#!/bin/sh
set -e -u

DRY_RUN=""
MAKEFILE="Makefile"
MAKEFILE_TEMPLATE="$MAKEFILE.in"
ONE_SHELL_TEST_RECIPE="$(printf "x:\n\tX=X\n\techo \$\$X\n")"
SELF="${0##*/}"

die()
{
    echo "$SELF: $1" >&2 && return 1
}

configure_sha256()
{
    test -z "${SHA256:=}" || return 0

    if command -v openssl >/dev/null 2>&1; then
        SHA256="openssl dgst -sha256"
    elif command -v sha256 >/dev/null 2>&1; then
        SHA256="sha256"
    elif command -v sha256sum >/dev/null 2>&1; then
        SHA256="sha256sum --tag"
    else
        die "unable to find command for SHA-256 hashing"
    fi
}

configure_make()
{
    # Check to see if "-B" is needed to make recipes execute each statement in
    # a separate shell.
    MAKE="${MAKE:-make}"
    if [ -n "$(echo "$ONE_SHELL_TEST_RECIPE" | $MAKE -s -j2 -f -)" ] &&
       [ -z "$(echo "$ONE_SHELL_TEST_RECIPE" | $MAKE -s -j2 -f - -B)" ]; then
       MAKE="$MAKE -B"
    fi

    if [ "${GMAKE:=}" = " " ]; then
        # If GMAKE is a space, that means the user explicitly unset it.
        GMAKE=""
    elif [ -n "$GMAKE" ]; then
        # If GMAKE is set, verify that it's actually GNU Make.
        $GMAKE -v 2>&1 | grep -q "GNU Make" || die "GMAKE is not GNU Make"
    else
        # If GMAKE is not set, try to find GNU Make.
        for GMAKE in "$MAKE" make gmake ""; do
            $GMAKE -v 2>&1 | grep -q "GNU Make" && break
        done
    fi

    test "$MAKE" != "make" || MAKE=""
    test -n "$MAKE" -o "$GMAKE" != "make" || GMAKE='$(MAKE)'
}

configure_cc()
{
    test -z "${CC:-}" || return 0
    CC="cc"

    case "$PLATFORM" in
      linux*)
        CC="$PWD/$(make -s -f "$MAKEFILE_TEMPLATE" musl-cc)"

        test ! -e "$CC" -a -z "$DRY_RUN" || return 0
        test -n "$GMAKE" || die "GNU Make needed for musl; set GMAKE or MAKE"
        test "$GMAKE" = '$(MAKE)' && make="make" || make="$GMAKE"

        echo "Building musl-cc..."
        $make -s -f "$MAKEFILE_TEMPLATE" CC="cc" musl
      ;;
    esac
}

configure_cflags_ldflags()
{
    if [ -z "${CFLAGS:-}" ] || [ -z "${LDFLAGS:-}" ]; then
        case "$PLATFORM: $(exec 2>&1; $CC -dumpspecs || $CC -v)" in
          macos*)
            _CFLAGS=""
            _LDFLAGS=""
          ;;

          freebsd*)
            _CFLAGS="-static"
            _LDFLAGS="-static"
          ;;

          *[!f]no-pie*|*clang*)
            _CFLAGS="-static -fno-pie -fPIC"
            _LDFLAGS="-static -no-pie"
          ;;

          *[!f]nopie*)
            _CFLAGS="-static -fno-pie -fPIC"
            _LDFLAGS="-static -nopie"
          ;;

          *)
            _CFLAGS="-static"
            _LDFLAGS="-static"
          ;;
        esac
    fi

    CFLAGS="-I\$(COMMON_PREFIX)/include ${CCOPTFLAGS:--O3} ${CFLAGS:-$_CFLAGS}"
    LDFLAGS="-L\$(COMMON_PREFIX)/lib ${LDFLAGS:-$_LDFLAGS}"
}

generate_makefile()
{
    # GNU Make treats "$TARGET" and "./$TARGET" as references to a single
    # target while some BSD Make variants treat them as two distinct targets.
    # If GNU Make is installed, it will be used in place of BSD Make where BSD
    # Make might otherwise fail. If GNU Make is not installed, a shim is used
    # to emulate GNU Make's behavior.
    if [ -z "$GMAKE" ]; then
        GMAKE='$(MAKE) MAKE="$(MAKE) -f Makefile -f $(PWD)/fake-gmake.mk"'
    fi

    while IFS="" read -r line; do
        case "$line" in
          # The "D" directory part modifier is specified by POSIX, but
          # OpenBSD's Make does not support it when used with $? and thus
          # requires a shim.
          .POSIX:)
            if [ -z "$(echo 'x:.;echo $(?D)' | ${MAKE:-make} -s -f -)" ]; then
                line="$(printf "%s\n%s" "$line" '?D = ${?:H}')"
            fi
          ;;

          # Static linking on macOS is not well supported, so the corresponding
          # configuration flags must be removed.
          [!#]*--enable-static*)
            case "$PLATFORM" in
              macos-*)
                continue
              ;;
            esac
          ;;

          # Replace commented variables with their proper values or delete them
          # if they are explicitly defined.
          [#]*=)
            set -- $line
            variable="$2" && eval "value=\"\${$variable:-}\""
            test -z "$value" || echo $variable = $value && continue
          ;;
        esac

        printf "%s\n" "$line"
    done < "$MAKEFILE_TEMPLATE"
}

usage()
{
    echo "Usage: $SELF [OPTION] [VARIABLE=[VALUE]]..."
    echo "Generate a Makefile configured for this platform."
    echo
    echo "Options:"
    echo "  -h  Display this text and exit."
    echo "  -n  Dry run; display the generated configuration without saving."
    echo
    echo "Variables:"
    echo "  CC          C compiler command"
    echo "  CCOPTFLAGS  Compiler optimization flags"
    echo "  CFLAGS      Compiler flags"
    echo "  LDFLAGS     Linker flags"
    echo
    echo "  GMAKE       GNU Make command"
    echo "  MAKE        POSIX-compatible Make command"
    echo "  SHA256      SHA-256 hashing command"
    echo
    echo "Environment Variables:"
    echo "  If any configurable variables are defined in the environment as"
    echo "  non-null strings, they will take precedence over the values that"
    echo "  would otherwise by generated by this script. To set these values"
    echo "  to null strings, use parameter variable assignment instead."
}

main()
{
    for argument in "$@"; do
        case "$argument" in
          CC=*|CCOPTFLAGS=*|CFLAGS=*|GMAKE=*|LDFLAGS=*|MAKE=*|SHA256=*)
            # The space after "}" makes it possible to null a value using
            # parameter assignment as documented in the script usage.
            eval "${argument%%=*}=\"\${argument#*=} \""
          ;;

          -h|--help)
            usage
            return 0
          ;;

          -n)
            DRY_RUN="X"
          ;;

          *)
            die "unsupported argument '$argument'"
          ;;
        esac
    done

    PLATFORM="$(make -f "$MAKEFILE_TEMPLATE" platform)"
    test -n "$PLATFORM"

    configure_make
    configure_sha256
    configure_cc
    configure_cflags_ldflags

    for var in CC CFLAGS LDFLAGS GMAKE MAKE SHA256; do
        eval "test -z \"\$$var\" || echo $var = \$$var"
    done

    test -z "$DRY_RUN" || return 0

    generate_makefile > "$MAKEFILE.new"

    if [ -e "$MAKEFILE" ] && diff -u "$MAKEFILE" "$MAKEFILE.new"; then
        echo
        echo "$SELF: Makefile contents unchanged"
        rm -f "$MAKEFILE.new"
    else
        mv -f "$MAKEFILE.new" "$MAKEFILE"
        chmod 400 "$MAKEFILE"
        echo "--"
        echo "$SELF: configuration written to $MAKEFILE"
    fi
}

main "$@"
