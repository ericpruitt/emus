Change the handling of various implementation compatibility options. Most
notably, the "--lint" option will no longer warns about non-POSIX features and
GNU extensions unless POSIX or traditional mode has been explicitly enabled,
and some non-standard features that were accepted when using one of those modes
will now produce fatal errors. No changes to code only affecting "--lint-old"
were made.

--- awkgram.c	2020-04-14 04:44:20.000000000 -0700
+++ awkgram.c	2020-05-14 13:23:08.530532533 -0700
@@ -4294,10 +4294,6 @@
 
 		if (do_traditional || do_posix)
 			yyerror("%s", msg);
-		else if (do_lint_extensions && ! warned) {
-			warned = true;
-			lintwarn("%s", msg);
-		}
 
 		f = yyvsp[0]->lasti;
 		f->opcode = Op_indirect_func_call;
@@ -6448,9 +6444,7 @@
 		pushback();
 		if (c == '[') {
 			if (do_traditional)
-				fatal(_("multidimensional arrays are a gawk extension"));
-			if (do_lint_extensions)
-				lintwarn(_("multidimensional arrays are a gawk extension"));
+				fatal(_("multidimensional arrays are not available in traditional mode"));
 			yylval = GET_INSTRUCTION(Op_sub_array);
 			lasttok = ']';
 		} else {
@@ -6474,8 +6468,6 @@
 			if (nextc(true) == '=') {
 				if (! did_warn_assgn) {
 					did_warn_assgn = true;
-					if (do_lint)
-						lintwarn(_("POSIX does not allow operator `%s'"), "**=");
 					if (do_lint_old)
 						lintwarn(_("operator `%s' is not supported in old awk"), "**=");
 				}
@@ -6485,8 +6477,6 @@
 				pushback();
 				if (! did_warn_op) {
 					did_warn_op = true;
-					if (do_lint)
-						lintwarn(_("POSIX does not allow operator `%s'"), "**");
 					if (do_lint_old)
 						lintwarn(_("operator `%s' is not supported in old awk"), "**");
 				}
@@ -6971,18 +6961,6 @@
 			}
 		}
 
-		if (do_lint) {
-			if (do_lint_extensions && (tokentab[mid].flags & GAWKX) != 0 && (warntab[mid] & GAWKX) == 0) {
-				lintwarn(_("`%s' is a gawk extension"),
-					tokentab[mid].operator);
-				warntab[mid] |= GAWKX;
-			}
-			if ((tokentab[mid].flags & NOT_POSIX) != 0 && (warntab[mid] & NOT_POSIX) == 0) {
-				lintwarn(_("POSIX does not allow `%s'"),
-					tokentab[mid].operator);
-				warntab[mid] |= NOT_POSIX;
-			}
-		}
 		if (do_lint_old && (tokentab[mid].flags & NOT_OLD) != 0
 				 && (warntab[mid] & NOT_OLD) == 0
 		) {
@@ -7295,10 +7273,6 @@
 		(void) mk_rexp(arg);
 
 		if (nexp == 3) {	/* 3rd argument there */
-			if (do_lint_extensions && ! warned) {
-				warned = true;
-				lintwarn(_("match: third argument is a gawk extension"));
-			}
 			if (do_traditional) {
 				yyerror(_("match: third argument is a gawk extension"));
 				return NULL;
@@ -7352,11 +7326,7 @@
 	} else if (r->builtin == do_close) {
 		static bool warned = false;
 		if (nexp == 2) {
-			if (do_lint_extensions && ! warned) {
-				warned = true;
-				lintwarn(_("close: second argument is a gawk extension"));
-			}
-			if (do_traditional) {
+			if (no_gawk_extensions) {
 				yyerror(_("close: second argument is a gawk extension"));
 				return NULL;
 			}
--- awk.h	2020-04-12 23:46:26.000000000 -0700
+++ awk.h	2020-05-14 13:16:08.310062351 -0700
@@ -1172,6 +1172,7 @@
 #define do_sandbox          (do_flags & DO_SANDBOX)
 #define do_debug            (do_flags & DO_DEBUG)
 #define do_mpfr             (do_flags & DO_MPFR)
+#define no_gawk_extensions  (do_posix | do_traditional)
 
 extern bool do_optimize;
 extern int use_lc_numeric;
--- builtin.c	2020-03-10 00:58:14.000000000 -0700
+++ builtin.c	2020-05-14 13:25:33.294420858 -0700
@@ -528,12 +528,11 @@
 		static bool warned = false;
 		unsigned long size;
 
-		if (do_posix)
+		// XXX: In the original code, this was (do_posix), but "The Awk
+		// Programming Language" by Kernigan et al (1988) only uses the length
+		// function with strings.
+		if (do_posix || do_traditional)
 			fatal(_("length: received array argument"));
-   		if (do_lint_extensions && ! warned) {
-			warned = true;
-			lintwarn(_("`length(array)' is a gawk extension"));
-		}
 
 		/*
 		 * Support for deferred loading of array elements requires that
--- eval.c	2020-02-06 12:52:56.000000000 -0800
+++ eval.c	2020-05-14 13:26:33.716706007 -0700
@@ -706,7 +706,7 @@
 {
 	static bool warned = false;
 
-	if ((do_lint_extensions || do_traditional) && ! warned) {
+	if (do_lint && no_gawk_extensions && ! warned) {
 		warned = true;
 		lintwarn(_("`IGNORECASE' is a gawk extension"));
 	}
@@ -727,7 +727,7 @@
 	char *p;
 	NODE *v = fixtype(BINMODE_node->var_value);
 
-	if ((do_lint_extensions || do_traditional) && ! warned) {
+	if (do_lint && no_gawk_extensions && ! warned) {
 		warned = true;
 		lintwarn(_("`BINMODE' is a gawk extension"));
 	}
--- field.c	2020-04-10 05:25:02.000000000 -0700
+++ field.c	2020-05-14 13:38:32.616356624 -0700
@@ -980,10 +980,6 @@
 		sep_arr = POP_PARAM();
 		if (sep_arr->type != Node_var_array)
 			fatal(_("split: fourth argument is not an array"));
-		if ((do_lint_extensions || do_lint_old) && ! warned) {
-			warned = true;
-			lintwarn(_("split: fourth argument is a gawk extension"));
-		}
 	}
 
 	sep = POP();
@@ -1029,14 +1025,10 @@
 		fs = sep->re_exp;
 
 		if (fs->stlen == 0) {
-			static bool warned = false;
-
 			parseit = null_parse_field;
 
-			if (do_lint && ! warned) {
-				warned = true;
-				lintwarn(_("split: null string for third arg is a non-standard extension"));
-			}
+			if (no_gawk_extensions)
+				fatal(_("split: null string for third arg is a non-standard extension"));
 		} else if (fs->stlen == 1 && (sep->re_flags & CONSTANT) == 0) {
 			if (fs->stptr[0] == ' ') {
 				parseit = def_parse_field;
@@ -1146,11 +1138,11 @@
 	bool fatal_error = false;
 	NODE *tmp;
 
-	if (do_lint_extensions && ! warned) {
+	if (do_lint && ! warned && no_gawk_extensions) {
 		warned = true;
 		lintwarn(_("`FIELDWIDTHS' is a gawk extension"));
 	}
-	if (do_traditional)	/* quick and dirty, does the trick */
+	if (no_gawk_extensions)	/* quick and dirty, does the trick */
 		return;
 
 	/*
@@ -1309,9 +1301,9 @@
 
 		set_parser(null_parse_field);
 
-		if (do_lint_extensions && ! warned) {
+		if (no_gawk_extensions) {
 			warned = true;
-			lintwarn(_("null string for `FS' is a gawk extension"));
+			fatal(_("null string for `FS' is a gawk extension"));
 		}
 	} else if (fs->stlen > 1 || (fs->flags & REGEX) != 0) {
 		if (do_lint_old)
@@ -1443,7 +1435,7 @@
 		warned = true;
 		lintwarn(_("`FPAT' is a gawk extension"));
 	}
-	if (do_traditional)	/* quick and dirty, does the trick */
+	if (no_gawk_extensions)	/* quick and dirty, does the trick */
 		return;
 
 	/*
--- io.c	2020-03-20 07:22:39.000000000 -0700
+++ io.c	2020-05-14 13:39:05.091439561 -0700
@@ -4054,6 +4054,9 @@
 	save_rs = dupnode(RS_node->var_value);
 	RS_is_null = false;
 	RS = force_string(RS_node->var_value);
+	if (RS->stlen > 1 && no_gawk_extensions) {
+		fatal(_("multicharacter value of `RS' is a gawk extension"));
+	}
 	/*
 	 * used to be if (RS_regexp != NULL) { refree(..); refree(..); ...; }.
 	 * Please do not remerge the if condition; hinders memory deallocation
@@ -4075,10 +4078,6 @@
 
 		matchrec = rsrescan;
 
-		if (do_lint_extensions && ! warned) {
-			lintwarn(_("multicharacter value of `RS' is a gawk extension"));
-			warned = true;
-		}
 	} else
 		matchrec = rs1scan;
 set_FS:
--- node.c	2020-02-06 12:52:57.000000000 -0800
+++ node.c	2020-05-14 13:16:08.314062241 -0700
@@ -598,7 +598,7 @@
 		}
 		return i;
 	case 'x':
-		if (do_lint) {
+		if (do_lint && do_posix) {
 			static bool warned = false;
 
 			if (! warned) {
