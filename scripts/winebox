#!/usr/bin/env python3
"""
Usage: winebox [-c INDEX:PATH] [-d DRIVE:PATH] [-w WINE] COMMAND [ARGUMENT]...
       winebox -h
       winebox --help

Ensure that there are no symlinks pointing to paths outside a Wine prefix
before executing the "wine" command with the specified arguments as a form of
light sandboxing. Option parsing stops at the first non-option argument.

Options:
  -c INDEX:PATH
        Map the specified COM device to a path. The index must be a value from
        1 through 256 which will create a symlink named "com1" through "com256"
        accordingly. For example, "-c 3:/dev/ttyS0" would make "/dev/ttyS0"
        accessible as "COM3".
  -d DRIVE:PATH
        Map the specified path to a drive in Wine. The drive is specified as a
        single ASCII letter, "a" through "z". For example, "-d z:/tmp" would
        make "/tmp" accessible as "Z:\\".
  -h, --help
        Show this documentation and exit.
  -w WINE
        Set the command or path to the Wine binary. This option can also be
        used to execute other Wine tools; "winebox -w winetricks d3dx9_36"
        could be used to install DirectX inside a sandboxed Wine prefix.
"""
import errno
import getopt
import glob
import os
import stat
import string
import subprocess
import sys

WINE_COMMAND = "wine"

HELP_OPTIONS = {"--help", "-h", "-V", "-?", "/?", "/h", "/help"}


def directory_contains(directory, path):
    """
    Verify whether or not a directory contains the specified path. This
    function does not resolve symlinks and operates based purely on string
    operations which means neither argument needs to exist.

    Arguments:
    - directory
    - path

    Return: True if "path" is in "directory" or false otherwise.
    """
    directory = os.path.abspath(directory) + os.path.sep
    path = os.path.abspath(path)
    return path.startswith(directory)


def usage():
    """
    Show script documentation and exit.
    """
    print(__doc__.strip())


def main(argv):
    """
    Main entry point for the script.

    Arguments:
    - argv: Command line argument list.

    Return: None or a numeric value representing the exit status.
    """
    if len(argv) > 1 and argv[1] in HELP_OPTIONS:
        usage()
        return

    mappings = dict()
    wine_command = WINE_COMMAND
    options, command = getopt.getopt(argv[1:], "c:d:hw:", ["help"])

    for option, value in options:
        match option:
          case "-c":
            try:
                index, path = value.split(":", 1)
            except ValueError:
                raise Exception('Argument must be in the form of "INDEX:PATH"')

            if not path:
                raise Exception("No mapping destination specified")

            try:
                index = int(index)

                if index < 1 or index > 256:
                    raise ValueError
            except ValueError:
                raise Exception("Index must be an integer from 1 through 256")

            mappings[f"com{index}"] = path

          case "-d":
            try:
                drive, path = value.split(":", 1)
            except ValueError:
                raise Exception('Argument must be in the form of "DRIVE:PATH"')

            if not path:
                raise Exception("No mapping destination specified")

            drive = drive.lower()

            if drive not in string.ascii_lowercase:
                raise Exception("Drive must be a single ASCII letter")

            # Wine uses a ":" suffix for directory symlinks and "::" for
            # devices.
            suffix = ":" if os.path.isdir(path) else "::"
            mappings[f"{drive}{suffix}"] = path

          case "-h" | "--help":
            usage()
            return

          case "-w":
            wine_command = value

    wine_prefix = os.environ.get("WINEPREFIX") or os.path.expanduser("~/.wine")
    dosdevices = os.path.join(wine_prefix, "dosdevices")

    # Create the Wine prefix if it does not already exist.
    if not os.path.exists(dosdevices):
        try:
            subprocess.check_call(["wineboot", "-i"])
        except subprocess.CalledProcessError as error:
            return error.returncode

    os.chmod(dosdevices, 0o700)

    # Delete or replace all symlinks that point outside the Wine prefix.
    for root, dirs, files in os.walk(wine_prefix):
        root = os.path.abspath(root)
        in_dosdevices = os.path.samefile(dosdevices, root)

        for basename in dirs + files:
            path = os.path.join(root, basename)
            is_dir = basename in dirs

            try:
                destination = os.path.join(root, os.readlink(path))
            except Exception as error:
                if error.errno == errno.EINVAL:
                    continue
                else:
                    raise

            # If a symlink points to the Wine prefix or a file inside the Wine
            # prefix, there is no need to delete it.
            if (os.path.samefile(wine_prefix, destination) or
              directory_contains(wine_prefix, destination)):
                continue

            os.unlink(path)

            # Don't replace directory symlinks with empty directories inside of
            # "dosdevices" to ensure user data stays inside of "drive_c".
            if not in_dosdevices and is_dir:
                os.mkdir(path)

    # Setup symlinks for user-defined mappings.
    for basename, destination in mappings.items():
        path = os.path.join(dosdevices, basename)

        try:
            status = os.lstat(path)

            if not stat.S_ISLNK(status.st_mode) and status.st_size:
                raise Exception("{path}: Non-empty file already exists")

            os.unlink(path)
        except FileNotFoundError:
            pass

        os.symlink(destination, path)

    # Wine's mountmgr.sys will only try to make lettered drives. If a
    # particular drive letter is already in use, it will go to the next letter
    # until it finds an open device. By creating all possible drive letters in
    # advance that are empty files, we can ensure that it never attempts to
    # create the symlinks.
    for letter in string.ascii_lowercase:
        # Wine uses a ":" suffix for symlinks to folders and "::" for symlinks
        # to devices, so we glob to match both.
        if not glob.glob(os.path.join(dosdevices, f"{letter}:*")):
            with open(os.path.join(dosdevices, f"{letter}:"), "a"):
                pass

    # Unfortunately, the same approach does not work with COM device symlinks,
    # so we have to lock down the dosdevices directory permissions. We can't
    # use this by itself because mountmgr.sys will loop indefinitely if it
    # tries to make a drive symlink but cannot, but this does not happen with
    # the com* symlinks.
    os.chmod(dosdevices, 0o500)

    os.execvp(wine_command, [wine_command] + command)


if __name__ == "__main__":
    try:
        sys.exit(main(sys.argv))
    except Exception as error:
        print(f"{os.path.basename(sys.argv[0])}:", error, file=sys.stderr)
        sys.exit(1)
