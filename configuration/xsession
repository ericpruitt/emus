#!/bin/sh
exec > /dev/null 2>&1

. ~/.profile

eval "$(
    xrandr --verbose \
    | awk '/\*current/ {
        x_pos = index($1, "x")
        print "display_height=" substr($1, x_pos + 1)
        print "display_width=" substr($1, 1, x_pos - 1)
        exit
    }'
)"

if [ "${display_width:-0}" -eq 3840 ]; then
    # For 14-inch laptops and 24-inch monitors.
    if [ -z "$FONT_DPI" ]; then
        if [ "$IS_LAPTOP" ]; then
            export FONT_DPI=174
        else
            export FONT_DPI=185  # Untested
        fi
    fi

    if [ -z "$DISPLAY_DPI" ]; then
        if [ "$IS_LAPTOP" ]; then
            export DISPLAY_DPI=314
        else
            export DISPLAY_DPI=185  # Untested
        fi
    fi

    export UHD_DISPLAY="x"
    export UI_SCALE="${UI_SCALE:-2}"
else
    export DISPLAY_DPI="${DISPLAY_DPI:-96}"
    export UI_SCALE="${UI_SCALE:-1}"
fi

export DPI_SCALE="$(echo "$FONT_DPI / $DISPLAY_DPI" | bc)"
export XCURSOR_SIZE="$(echo "scale=0; 24 * $UI_SCALE / 1" | bc)"

export GDK_DPI_SCALE="$DPI_SCALE"
export GDK_SCALE="$UI_SCALE"
export QT_SCALE_FACTOR="$UI_SCALE"

xrdb -override "$EMUS/configuration/xrdb.ad"
echo "Xft.dpi: $FONT_DPI" | xrdb -override -
xrandr --dpi "$DISPLAY_DPI"

xset s off -dpms
blackwalls

# Using "--daemon" does not work on my T14 AMD laptop and results in no windows
# or UI elements being displayed although I can still interact with them; see
# <https://github.com/chjj/compton/issues/339>.
compton -C $(
    glxinfo | fgrep -q "direct rendering: Yes" && echo " --backend=glx"
) &

# Configure NVIDIA driver to make full use of the compositor to reduce tearing.
nvidia-settings --assign CurrentMetaMode="nvidia-auto-select +0+0 {
    ForceFullCompositionPipeline = On
}"

# Monitor "/dev/input/by-id/" for keyboards that have been plugged in and
# configure them to convert the Caps Lock key to the Hyper key. Plugging in a
# single physical device can result in multiple event devices being created in
# "/dev/", so xmodmap execution has a refractory period of one second before it
# will respond to another inotifywait event. The "echo" ensures the keyboard
# mappings are configured immediately the first time this code runs.
(echo x-kbd; inotifywait -mq -e create /dev/input/by-id/) | while read line; do
    case "$line" in
      *-kbd*)
        jobs % && continue
        setxkbmap -layout us &&
        xmodmap \
            -e "remove mod4 = Hyper_L" \
            -e "remove Lock = Caps_Lock" \
            -e "keysym Caps_Lock = Hyper_L" \
            -e "add mod3 = Hyper_L" &&
        sleep 1 &
      ;;
    esac
done &

pipe="$HOME/.screen-locker-pipe"
rm -f -- "$pipe"
mkfifo -- "$pipe" || exit

font_size="$((60 * display_height / 1200))"
PIPE="$pipe" screen-locker \
    -m "${HOSTNAME:-Ready.}" \
    -n "-misc-fixed-bold-r-normal--$font_size-*-*-*-*-*-*-*" \
    sh -c 'echo OK > "$PIPE"' &
timeout 5 grep -q OK -- "$pipe" || exit

test -e "$HOME/.local.xsession" && . "$HOME/.local.xsession"

st &
statusline -i -m -z US/Pacific | singleton fifo2rootname &
thunar --daemon &

PATH="$EMUS/desktop-environment/scripts:$PATH"
singleton media-control monitor &

until dwm; do sleep 1; done
kill -SIGTERM -$$
