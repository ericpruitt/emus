#!/bin/sh
# Usage: media-control ACTION
#        media-control monitor [EVENT_LISTENER]
#
# Control media player and system audio. Underscores ("_") and dashes ("-") may
# be used interchangeably in action names. If this script is run with an
# invalid number of arguments or an unrecognized action, a list of available
# actions will be displayed, and the will terminate with a non-zero exit
# status.
#
# The script will terminate immediately after executing an action unless the
# action is "monitor". The monitor action listens and responds to audio-related
# ACPI events. It will only terminate if the event listener could not be run.
# When no event listener is explicitly given, "acpi_listen" is used by default.
#
set -e -u

# Increase system volume.
#
_volume_up()
{
    amixer -q set Master 5%+
}

# Decrease system volume.
#
_volume_down()
{
    amixer -q set Master 5%-
}

# Play the next track in the playlist.
#
_next_track()
{
    mocp -f
}

# Play the previous track in the playlist. If the back button is pressed after
# the first 5 seconds of a track, the track will be replayed from the
# beginning.
#
_previous_track()
{
    test "$(mocp -Q %cs)" -gt 5 && mocp -k -99999 || mocp -r
}

# Stop cycling through the playlist. This resets the playlist cursor, so the
# next "play" command will start from the first track.
#
_stop_playlist()
{
    mocp -s
}

# If the playlist is stopped, this function will begin replay the list starting
# from the first track. Otherwise, this function will toggle between the paused
# and playing state of current track.
#
_pause_or_play()
{
    test "$(mocp -i)" = "State: STOP" && mocp -p || mocp -G
}

# Toggle system audio on and off.
#
_toggle_muted_audio()
{
    amixer -q -D pulse set Master toggle || amixer -q set Master toggle
}

# Toggle the equalizer of an Audigy2 sound card. This a no-op if there is no
# Audigy2 card installed.
#
_bass_toggle()
{
    amixer -q -c "Audigy2" set Tone playback toggle
}

# Monitor and react to media and audio-related ACPI events.
#
# Arguments:
# - $1: Optional event listener command. When this argument is not set,
#   "acpi_listen" is used by default.
#
_monitor()
{
    # Attempt to start MOC server but do not exit if the command fails.
    mocp -S >/dev/null 2>&1 || :

    "${1:-acpi_listen}" | while read -r event; do
        case "$event" in
          */volumeup*)      _volume_up          ;;
          */volumedown*)    _volume_down        ;;
          */play*)          _pause_or_play      ;;
          */prev*)          _previous_track     ;;
          */next*)          _next_track         ;;
          */stop*)          _stop_playlist      ;;
          */mute*)          _toggle_muted_audio ;;
        esac || : # Ignore non-zero return codes from functions.
    done

    return 127
}

main()
{
    # If the argument given refers to an action function, run the corresponding
    # function. Otherwise, display a list of supported actions. See
    # http://pubs.opengroup.org/onlinepubs/9699919799/utilities/command.html
    # for the POSIX specification of the behavior of "command -v."
    fname="_${1:-UNDEFINED}"
    test -n "${fname##*-*}" || fname="$(echo "$fname" | tr "-" "_")"
    shift

    if [ "$(command -v "$fname")" != "$fname" ]; then
        sed -n '
            /^# Usage:/,/^[^#]/ {
                s/^[^#]*$/Action:/p
                s/^#$//p
                s/^# //p
            }
            y/_/-/
            s/^-\(.*\)()$/- \1/p
        ' "$0"
        return 1
    fi

    "$fname" ${@:-}
}

main ${@:-}
