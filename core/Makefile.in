#!/usr/bin/make -f
# Author: Eric Pruitt (https://www.codevat.com)
# License: 2-Clause BSD (http://opensource.org/licenses/BSD-2-Clause)
.POSIX:
.SILENT:
.SUFFIXES: .asc .sig .unverified .FOLDER .TAR_GZ_FOLDER .TAR_XZ_FOLDER

# Build flags:
# CC =
# CCOPTFLAGS =
# CFLAGS =
# LDFLAGS =
# Make implementations:
# GMAKE =
# MAKE =
# Miscellaneous programs:
# SHA256 =
# Platform-specific build targets:
# COMPAT =

# Packages:
BASH = bash-4.4
COREUTILS = coreutils-8.27
FINDUTILS = findutils-4.6.0
GAWK = gawk-4.2.0
GMP = gmp-6.1.2
GREP = grep-3.1
LESS = less-487
LIBEVENT = libevent-2.1.8-stable
MPFR = mpfr-3.1.5
MUSL = musl-1.1.16
NCURSES = ncurses-6.0
READLINE = readline-7.0
SED = sed-4.4
TMUX = tmux-src
TREE = tree-1.7.0
UTF8PROC = utf8proc-src
VIM = vim-src

# Revision-controlled package versions:
TMUX_VERSION = 2.6
UTF8PROC_VERSION = 2.1.0
VIM_VERSION = 8.0.0692

# Hashes of unsigned files:
SHA_HASHES = \
	"findutils-4.6.0" \
	ded4c9f73731cd48fec3b6bdaccce896473b6d8e337e9612e16cf1431bb1169d \
	"tree-1.7.0" \
	6957c20e82561ac4231638996e74f4cfa4e6faabc5a2f511f0b4e3940e8f7b12 \

# Build dependencies:
DEBIAN_BUILD_DEPS = automake bison build-essential pkg-config
FREEBSD_BUILD_DEPS = automake git gnupg1 pkgconf wget
MACOS_BUILD_DEPS = automake gnupg wget xz
OPENBSD_BUILD_DEPS = "automake->=1.15" git "gnupg->=2.1" wget xz

# Build targets:
LIBRARIES = \
	$(GMP) \
	$(LIBEVENT) \
	$(MPFR) \
	$(NCURSES) \
	$(READLINE) \
	$(UTF8PROC) \

BINARIES = \
	$(BASH)/bash \
	$(COREUTILS)/src/coreutils \
	$(FINDUTILS)/find/find \
	$(FINDUTILS)/xargs/xargs \
	$(GAWK)/gawk \
	$(GREP)/src/grep \
	$(LESS)/less \
	$(LESS)/lessecho \
	$(LESS)/lesskey \
	$(TMUX)/tmux \
	$(SED)/sed/sed \
	$(TREE)/tree \
	$(VIM)/src/vim \
	$(VIM)/src/xxd/xxd \

# Distributable archive installation defaults:
DIST_BIN = ~/.local/bin
DIST_MAN = ~/.local/share/man

FOLDER_CLEAN_TARGETS = \
	clean-bash \
	clean-coreutils \
	clean-findutils \
	clean-gawk \
	clean-gmp \
	clean-grep \
	clean-less \
	clean-libevent \
	clean-mpfr \
	clean-musl \
	clean-ncurses \
	clean-readline \
	clean-sed \
	clean-tree \

GIT_CLEAN_TARGETS = \
	clean-tmux \
	clean-utf8proc \
	clean-vim \

TAR_GZ_SIGNATURES = \
	$(BASH).tar.gz.sig \
	$(LESS).tar.gz.sig \
	$(LIBEVENT).tar.gz.sig \
	$(MUSL).tar.gz.sig \
	$(NCURSES).tar.gz.sig \
	$(READLINE).tar.gz.sig \

TAR_XZ_SIGNATURES = \
	$(COREUTILS).tar.xz.sig \
	$(GAWK).tar.xz.sig \
	$(GMP).tar.xz.sig \
	$(GREP).tar.xz.sig \
	$(MPFR).tar.xz.sig \
	$(SED).tar.xz.sig \

SIGNED_ARCHIVE_FOLDERS = \
	$(TAR_GZ_SIGNATURES:.tar.gz.sig=/.TAR_GZ_FOLDER) \
	$(TAR_XZ_SIGNATURES:.tar.xz.sig=/.TAR_XZ_FOLDER) \

COMMON_PREFIX = $(PWD)/common
DEFAULT = .DEFAULT
DEFAULT_TERMINFO_DIR = /etc/terminfo:/lib/terminfo:/usr/share/terminfo
GNUPGHOME = gnupghome
GPG = $$(which gpg2 || which gpgv2 || echo gpg) --homedir="$(GNUPGHOME)"
MUSL_CC = $(MUSL)/bin/musl-cc
PUBRING = $(GNUPGHOME)/pubring.kbx
WGET = wget --no-use-server-timestamps -nv

UTF8PROC_WCWIDTH = utf8proc-wcwidth
UTF8PROC_WCWIDTH_SO = $(UTF8PROC_WCWIDTH)/utf8proc-wcwidth.so
UTF8PROC_WCWIDTH_SRC = $(UTF8PROC_WCWIDTH_SO:.so=.c)

FOLDERS = $$(echo $(BINARIES) $(LIBRARIES) | xargs -n1 | cut -d/ -f1 | sort -u)

# These are targets listed in $(VIM)/Filelist that have their contents copied
# into $(BIN)/vimruntime. Among many other things, list includes files needed
# English spell / grammar checking, documentation and a mapping between RGB
# colors and English words.
VIM_RUNTIME_TARGETS = \
	LANG_GEN_BIN \
	RT_ALL \
	RT_DOS \
	RT_SCRIPTS \

# This is a list of individual paths in the runtime folder that are part of a
# target that has lots of other unwanted files.
VIM_RUNTIME_EXTRAS = \
	runtime/doc/tags \

all:
	if ! $(MAKE) -k $(BINARIES) $(COMPAT); then \
		echo "Incomplete build:"; \
		$(MAKE) what; \
		exit 1; \
	fi
	echo
	echo "Sanity checks:"
	$(MAKE) -s sanity

clean-common:
	rm -f -r "$(COMMON_PREFIX)"

$(GIT_CLEAN_TARGETS):
	(target='$@' && \
	path="$${target#clean-}-src" && \
	test -e "$$path" || exit 0 && \
	cd "$$path" && \
	if [ -n "$$(git status --porcelain --ignored)" ]; then \
		echo "- $$path" && \
		git stash save -u --quiet "make $@" && \
		git clean -d -f -q -x; \
	fi)

$(FOLDER_CLEAN_TARGETS):
	target='$@' && \
	for path in $$(echo "$(FOLDERS)" | grep "^$${target#clean-}"); do \
		test -d "$$path" || break; \
		echo "- $$path"; \
		rm -f -r "$$path"; \
		test ! -e "$(COMMON_PREFIX)/$$path" || $(MAKE) clean-common; \
	done

clean: $(GIT_CLEAN_TARGETS) $(FOLDER_CLEAN_TARGETS) clean-utf8proc-wcwidth

purge:
	rm -f -r dist.tmp dist.tar.xz "$(GNUPGHOME)" "$(GNUPGHOME).tmp"
	rm -f $(COMPAT)
	for prefix in $(FOLDERS); do \
		rm -f -r "$$prefix".*.asc "$$prefix".*.sig "$$prefix".tar.* \
		         "$$prefix"-patches/ "$$prefix"/; \
	done

pristine:
	$(MAKE) clean
	$(MAKE) purge
	rm -f Makefile

platform:
	if [ -e /etc/debian_version ]; then \
		printf "%s-" debian $$(cat /etc/debian_version); \
	elif [ -e /etc/redhat-release ]; then \
		printf "%s-" $$( \
			rpm -q --last --whatprovides /etc/redhat-release \
			| awk -F "." '{print $$1; exit}' \
		); \
	elif [ "$$(uname)" = Darwin ]; then \
		printf "%s-" macos $$(sw_vers -productVersion); \
	fi
	uname -s -r | tr "A-Z " "a-z-"

debian-deps:
	apt-get install $(DEBIAN_BUILD_DEPS)

freebsd-deps:
	pkg install $(FREEBSD_BUILD_DEPS)

macos-deps:
	brew install $(MACOS_BUILD_DEPS)

openbsd-deps:
	for pkg in $(OPENBSD_BUILD_DEPS); do \
		case "$$pkg" in \
		  *-["<>="]*) \
			pkg_info -I "$$pkg" \
			| sort -r -V \
			| awk '{print $$1; exit}'; \
		  ;; \
		  *) \
			echo "$$pkg"; \
		  ;; \
		esac; \
	done \
	| xargs pkg_add

deps:
	platform="$$($(MAKE) platform)" && \
	 case "$$platform" in \
	  debian-*) \
		$(MAKE) debian-deps; \
	  ;; \
	  freebsd-*) \
		$(MAKE) freebsd-deps; \
	  ;; \
	  openbsd-*) \
		$(MAKE) openbsd-deps; \
	  ;; \
	  macos-*) \
		$(MAKE) macos-deps; \
	  ;; \
	  *) \
		echo "$$platform: build dependency installation is not" \
		     "supported on this platform" >&2; \
		exit 1; \
	  ;; \
	esac

sanity:
	for binary in $(BINARIES) $(COMPAT); do \
		case "$$binary" in \
		  */tmux)               args="-V" ;; \
		  */xxd)                args="" ;; \
		  *.so)                 args="env" ;; \
		  *)                    args="--version" ;; \
		esac; \
		printf "\055 %s" "$$binary: "; \
		echo | "$$binary" $$args >/dev/null && echo "OK" && continue; \
		trap 'exit 1' EXIT; \
	done

what:
	for binary in $(BINARIES) $(COMPAT); do \
		symbol=" "; \
		if [ -e "$$binary" ]; then \
			symbol="+"; \
		elif [ -e "$${binary%%/*}" ]; then \
			symbol="~"; \
		fi; \
		echo "$$symbol $$binary"; \
	done

install:
	if [ -z "$(BIN)" ]; then \
		echo "BIN must be set to install" >&2; \
		exit 1; \
	fi
	mkdir -p "$(BIN)"
	test -z "$(MAN)" || mkdir -p "$(MAN)/man1/"
	for binary in $$(ls $(BINARIES) $(COMPAT) 2>/dev/null); do \
		echo "- $$binary"; \
		$(MAKE) BIN="$(BIN)" MAN="$(MAN)" "$(BIN)/$${binary##*/}"; \
	done; \
	if [ -z "$$binary" ]; then \
		echo "$@: no binaries built; nothing to install" >&2; \
		exit 1; \
	fi

dist.tar.xz: $(BINARIES) $(COMPAT) dist.mk
	rm -f -r dist.tmp "$@.tmp"
	mkdir -p dist.tmp/bin dist.tmp/man
	sed < dist.mk > dist.tmp/Makefile \
		-e 's:<BIN>:$(DIST_BIN):g' \
		-e 's:<MAN>:$(DIST_MAN):g' \
		-e "s:<PLATFORM>:$$($(MAKE) platform):g"
	chmod +x dist.tmp/Makefile
	$(MAKE) -s BIN=dist.tmp/bin MAN=dist.tmp/man install
	printf "\n%s\n" "Compressing..."
	tar -c -f - dist.tmp | xz -9 -e -c - > "$@.tmp"
	rm -f -r dist.tmp
	mv "$@.tmp" "$@"

dist: dist.tar.xz
	echo "Distributable archive:"
	ls -h -l $?

$(DEFAULT):
	case '$@' in \
	  *.tar.gz|*.tar.xz|*.sig) \
		echo '$@' \
		| sed 's|\(\(.*\)-.*\)|http://ftpmirror.gnu.org/\2/\1|' \
		| $(WGET) -c -i -; \
	  ;; \
	  *) \
		echo "make: .DEFAULT: don't know how to make $@" >&2; \
		exit 1; \
	  ;; \
	esac

.unverified:
	if ! $(SHA256) < $< | grep -q "$$(printf '%s\n' $(SHA_HASHES))"; then \
		echo "make: $?: hash not recognized" >&2; \
		exit 1; \
	fi
	ln -f -s $< $@

.asc.sig:
	mv $< $@

.TAR_XZ_FOLDER.FOLDER:
	ln -s .TAR_XZ_FOLDER $@

.TAR_GZ_FOLDER.FOLDER:
	ln -s .TAR_GZ_FOLDER $@

$(PUBRING):
	rm -f -r "$(@D)"
	mkdir -m 700 $(@D)
	$(GPG) --homedir="$(@D)" --import public-keys/*
	if ! [ -e $(PUBRING) ]; then \
		echo "$(PUBRING) not found after importing keys. Is GPG" \
		     "version 2.1 or newer?" >&2; \
		exit 1; \
	fi

# When looking for patches from Chet Ramey, a wget exit status of 8 ("Server
# issued an error response.") is ignored; it is presumed the request failed
# because no patches have been uploaded. The *-patches folder will still be
# created, but it will only contain the ".FOLDER" dummy target.
$(BASH)-patches/.FOLDER $(READLINE)-patches/.FOLDER: $(PUBRING)
	echo '$(@D)' \
	| sed 's|^\(\(.*\)-.*-patches\)$$|ftp://ftp.gnu.org/gnu/\2/\1/*|' \
	| $(WGET) -c -i - -P "$(@D)" || test "$$?" -eq 8
	test ! -e $(@D) || echo $(@D)/*.sig | xargs -n1 $(GPG)
	mkdir -p $(@D)
	touch $@

$(SIGNED_ARCHIVE_FOLDERS): $(PUBRING)
	prefix='$@' && prefix="$${prefix%/*}" && case '$@' in \
	  */.TAR_GZ_FOLDER) \
		$(MAKE) $(@D).tar.gz $(@D).tar.gz.sig; \
		$(GPG) $(@D).tar.gz.sig && tar -x -z -f $(@D).tar.gz; \
	  ;; \
	  */.TAR_XZ_FOLDER) \
		$(MAKE) $(@D).tar.xz $(@D).tar.xz.sig; \
		$(GPG) $(@D).tar.xz.sig && xzcat $(@D).tar.xz | tar -x -f -; \
	  ;; \
	esac
	case '$@' in \
	  $(BASH)/*|$(READLINE)/*) \
		$(MAKE) $(@D)-patches/.FOLDER; \
	  ;; \
	esac
	for path in patches/$(@D)-* $(@D)-patches/*; do \
		case "$$path" in *.sig|*[*]*) continue ;; esac; \
		echo "- $$path"; \
		(cd $(@D) && patch -p0) < "$$path"; \
	done
	touch $@

$(MUSL).tar.gz $(MUSL).tar.gz.asc:
	$(WGET) -nc https://www.musl-libc.org/releases/$@

$(MUSL)/.FOLDER: $(MUSL).tar.gz $(MUSL).tar.gz.asc $(PUBRING)
	$(GPG) --verify $(MUSL).tar.gz.asc
	tar -x -z -f $(MUSL).tar.gz
	rm $(MUSL)/src/ctype/wcwidth.c
	touch $@

$(MUSL)/config.mak: $(MUSL)/.FOLDER
	(cd $(@D) && \
	./configure \
		CC="$(CC)" \
		CFLAGS="$(CFLAGS) -I$(PWD)/$(UTF8PROC)" \
		--disable-shared \
		--prefix="$$PWD" \
	)

$(MUSL)/src/ctype/wcwidth.c: $(MUSL)/.FOLDER $(UTF8PROC_WCWIDTH_SRC)
	cp $(UTF8PROC_WCWIDTH_SRC) $@

$(MUSL_CC): $(MUSL)/config.mak $(MUSL)/src/ctype/wcwidth.c $(UTF8PROC)/utf8proc.c $(UTF8PROC)/utf8proc_data.c
	echo "Building musl-cc..."
	rm -f "$(PWD)/$(MUSL)/bin/musl"-*
	(cd $(MUSL) && $(MAKE) -S install)
	ln -s $(PWD)/$(MUSL)/bin/musl-* "$$(realpath $@)"

musl: $(MUSL_CC)

musl-cc:
	echo $(MUSL_CC)

$(GMP)/Makefile: $(GMP)/.FOLDER
	(cd $(@D) && \
	./configure -C \
		CC="$(CC)" \
		CFLAGS="$(CFLAGS)" \
		--disable-shared \
		--enable-static \
		--prefix="$(COMMON_PREFIX)" \
	)

$(GMP)/.BUILT: $(GMP)/Makefile
	(cd $(?D) && $(MAKE) -S install) && touch $@

$(LIBEVENT).tar.gz $(LIBEVENT).tar.gz.asc:
	release='$@' && \
	release="$${release#libevent-}" && \
	release="$${release%.tar.gz*}" && \
	$(WGET) -nc https://github.com/libevent/libevent/releases/download/release-$$release/$@

$(LIBEVENT)/Makefile: $(LIBEVENT)/.FOLDER
	(cd $(@D) && \
	./configure \
		CC="$(CC)" \
		CFLAGS="$(CFLAGS)" \
		LDFLAGS="$(LDFLAGS)" \
		--disable-dependency-tracking \
		--disable-openssl \
		--enable-shared \
		--prefix="$(COMMON_PREFIX)" \
	)

$(LIBEVENT)/.BUILT: $(LIBEVENT)/Makefile
	(cd $(?D) && $(MAKE) -S install) && touch $@

$(MPFR)/Makefile: $(MPFR)/.FOLDER $(GMP)/.BUILT
	(cd $(@D) && \
	./configure -C \
		CC="$(CC)" \
		CFLAGS="$(CFLAGS)" \
		LDFLAGS="$(LDFLAGS)" \
		--disable-shared \
		--enable-static \
		--prefix="$(COMMON_PREFIX)" \
	)

$(MPFR)/.BUILT: $(MPFR)/Makefile
	(cd $(?D) && $(MAKE) -S install) && touch $@

$(NCURSES)/Makefile: $(NCURSES)/.FOLDER
	(cd $(@D) && \
	./configure -C \
		CC="$(CC)" \
		CFLAGS="$(CFLAGS)" \
		CPPFLAGS="$(CPPFLAGS) -P" \
		ac_cv_header_dlfcn_h="no" \
		--disable-db-install \
		--enable-static \
		--prefix="$(COMMON_PREFIX)" \
		--with-default-terminfo-dir="$(DEFAULT_TERMINFO_DIR)" \
		--without-ada \
		--without-cxx \
		--without-cxx-binding \
		--without-manpages \
		--without-progs \
		--without-tests \
	)

$(NCURSES)/.BUILT: $(NCURSES)/Makefile
	(cd $(?D) && $(GMAKE) -S install) && touch $@

$(READLINE)/Makefile: $(READLINE)/.FOLDER $(NCURSES)/.BUILT
	(cd $(@D) && \
	./configure -C \
		CC="$(CC)" \
		CFLAGS="$(CFLAGS)" \
		--disable-shared \
		--prefix="$(COMMON_PREFIX)" \
		--with-curses \
	)

$(READLINE)/.BUILT: $(READLINE)/Makefile
	(cd $(?D) && $(MAKE) -S install) && touch $@

$(BASH)/Makefile: $(BASH)/.FOLDER $(READLINE)/.BUILT
	(cd $(@D) && \
	./configure \
		CC="$(CC)" \
		CFLAGS="$(CFLAGS)" \
		LDFLAGS="$(LDFLAGS)" \
		ac_cv_header_dlfcn_h="no" \
		--disable-nls \
		--enable-static-link \
		--with-installed-readline="$(COMMON_PREFIX)" \
		--without-bash-malloc \
	)

# Even when using --enable-static-link, Bash may add -rdynamic to some of the
# linker flags, and clearing LOCAL_LDFLAGS fixes this.
$(BASH)/bash: $(BASH)/Makefile
	(cd $(?D) && $(MAKE) LOCAL_LDFLAGS= -S)

bash: $(BASH)/bash

$(BIN)/bash: $(BASH)/bash
	if [ -n "$(MAN)" ]; then \
		cp -f "$(BASH)/doc/bash.1" "$(MAN)/man1/"; \
		cp -f "$(BASH)/doc/rbash.1" "$(MAN)/man1/"; \
	fi
	ln -f -s bash "$(BIN)/rbash"
	cp -f $? $@

$(COREUTILS)/Makefile: $(COREUTILS)/.FOLDER $(GMP)/.BUILT
	(cd $(@D) && \
	./configure \
		CC="$(CC)" \
		CFLAGS="$(CFLAGS) -std=c99" \
		LDFLAGS="$(LDFLAGS)" \
		--disable-dependency-tracking \
		--disable-nls \
		--enable-no-install-program=stdbuf \
		--enable-single-binary=shebangs \
	)

$(COREUTILS)/src/coreutils: $(COREUTILS)/Makefile
	(cd $(?D) && $(GMAKE) -S)

coreutils: $(COREUTILS)/src/coreutils

$(BIN)/coreutils: $(COREUTILS)/src/coreutils
	if [ -n "$(MAN)" ]; then \
		ln -f -s test.1 "$(MAN)/man1/[.1"; \
		ln -s -f install.1 "$(MAN)/man1/ginstall.1"; \
		($? --help | grep cp && echo install) \
		| xargs printf "$(COREUTILS)/man/%s.1\n" \
		| xargs ls -1 2>/dev/null \
		| xargs sh -c "cp -f \"\$$@\" $(MAN)/man1/"; \
	fi
	$? --help | grep cp | (cd "$(BIN)" && xargs -n1 ln -f -s coreutils)
	ln -f -s ginstall "$(BIN)/install"
	cp -f $? $@

$(FINDUTILS).tar.gz.unverified:
	rm -f $(@:.unverified=)
	$(WGET) -O $@ http://ftpmirror.gnu.org/findutils/$(FINDUTILS).tar.gz

$(FINDUTILS)/.FOLDER: $(FINDUTILS).tar.gz
	tar -x -z -f $?
	touch $@

$(FINDUTILS)/Makefile: $(FINDUTILS)/.FOLDER
	(cd $(@D) && \
	./configure \
		CC="$(CC)" \
		CFLAGS="$(CFLAGS)" \
		LDFLAGS="$(LDFLAGS)" \
		LIBS="-lpthread" \
		--disable-dependency-tracking \
		--disable-nls \
	)

$(FINDUTILS)/gl/lib/libgnulib.a: $(FINDUTILS)/Makefile
	(cd $(@D) && $(MAKE) -S)

$(FINDUTILS)/lib/libfind.a: $(FINDUTILS)/gl/lib/libgnulib.a
	(cd $(@D) && $(MAKE) -S)

# The build dependencies and configuration of findutils is a bit of a mess. On
# OpenBSD, running (cd findutils-*/find/ && make) fails because of some
# problems with the libfindtools.a dependency. I split that out into a separate
# step, but then the build that succeeded on OpenBSD began to fail on Linux:
# building libfindtools.a in isolation fails because defs.h has an
# unconditional "#include <selinux/selinux.h>". There are also some other
# miscellaneous issues surrounding parallel and recursive make from the parent
# directory.
$(FINDUTILS)/find/find $(FINDUTILS)/xargs/xargs: $(FINDUTILS)/lib/libfind.a
	if [ "$$(uname)" != "Linux" ] && [ '$(@F)' = "find" ]; then \
		(cd $(@D) && $(MAKE) -S libfindtools.a); \
	fi
	(cd $(@D) && $(MAKE) -S)

findutils: $(FINDUTILS)/find/find $(FINDUTILS)/xargs/xargs

$(BIN)/find: $(FINDUTILS)/find/find
	test -z "$(MAN)" || cp -f $?.1 "$(MAN)/man1/"
	cp -f $? $@

$(BIN)/xargs: $(FINDUTILS)/xargs/xargs
	test -z "$(MAN)" || cp -f $?.1 "$(MAN)/man1/"
	cp -f $? $@

# For whatever reason, autotools considers FreeBSD's mktime(3) implementation
# buggy, so "ac_cv_func_working_mktime=yes" must be used to force the build
# system to use the host's mktime(3). See
# https://lists.gnu.org/archive/html/bug-gawk/2017-07/msg00024.html for more
# information.
$(GAWK)/Makefile: $(GAWK)/.FOLDER $(GMP)/.BUILT $(MPFR)/.BUILT $(READLINE)/.BUILT
	(cd $(@D) && \
	./configure \
		CC="$(CC)" \
		CFLAGS="$(CFLAGS) -DREALLYMEAN" \
		LDFLAGS="$(LDFLAGS)" \
		ac_cv_func_working_mktime="yes" \
		ac_cv_header_dlfcn_h="no" \
		--disable-dependency-tracking \
		--disable-extensions \
		--disable-nls \
	)

$(GAWK)/gawk: $(GAWK)/Makefile
	(cd $(?D) && $(MAKE) -S)

gawk: $(GAWK)/gawk

$(BIN)/gawk: $(GAWK)/gawk
	if [ -n "$(MAN)" ]; then \
		ln -f -s gawk.1 "$(MAN)/man1/awk.1"; \
		cp -f $(GAWK)/doc/gawk.1 "$(MAN)/man1/"; \
	fi
	cp -f -r $(GAWK)/awklib/eg/lib/ "$(BIN)/awklib"
	ln -f -s gawk "$(BIN)/awk"
	cp -f $? $@

$(GREP)/Makefile: $(GREP)/.FOLDER
	(cd $(@D) && \
	./configure \
		CC="$(CC)" \
		CFLAGS="$(CFLAGS) -std=c99" \
		LDFLAGS="$(LDFLAGS)" \
		LIBS="-lpthread" \
		--disable-dependency-tracking \
		--disable-nls \
	)

$(GREP)/src/grep: $(GREP)/Makefile
	(cd $(?D) && $(MAKE) -S)

grep: $(GREP)/src/grep

$(BIN)/grep: $(GREP)/src/grep
	if [ -n "$(MAN)" ]; then \
		cp -f $(GREP)/doc/grep.1 "$(MAN)/man1/"; \
		ln -f -s grep.1 "$(MAN)/man1/egrep.1"; \
		ln -f -s grep.1 "$(MAN)/man1/fgrep.1"; \
	fi
	cp -f $(GREP)/src/egrep "$(BIN)"
	cp -f $(GREP)/src/fgrep "$(BIN)"
	cp -f $? $@

$(LESS).tar.gz $(LESS).tar.gz.sig:
	$(WGET) -nc http://www.greenwoodsoftware.com/less/$@

$(LESS)/Makefile: $(LESS)/.FOLDER $(NCURSES)/.BUILT
	(cd $(@D) && \
	./configure \
		CC="$(CC)" \
		CFLAGS="$(CFLAGS)" \
		LDFLAGS="$(LDFLAGS)" \
	)

$(LESS)/less $(LESS)/lessecho $(LESS)/lesskey: $(LESS)/Makefile
	(cd $(?D) && $(MAKE) -S $(@F))

less: $(LESS)/less $(LESS)/lessecho $(LESS)/lesskey

$(BIN)/less: $(LESS)/less
	test -z "$(MAN)" || cp -f $?.nro "$(MAN)/man1/$(@F).1"
	cp -f $? $@

$(BIN)/lessecho: $(LESS)/lessecho
	test -z "$(MAN)" || cp -f $?.nro "$(MAN)/man1/$(@F).1"
	cp -f $? $@

$(BIN)/lesskey: $(LESS)/lesskey
	test -z "$(MAN)" || cp -f $?.nro "$(MAN)/man1/$(@F).1"
	cp -f $? $@

$(TMUX)/.git:
	git clone -b $(TMUX_VERSION) https://github.com/tmux/tmux.git $(TMUX)

$(TMUX)/configure: $(LIBEVENT)/.BUILT $(TMUX)/.git $(NCURSES)/.BUILT
	(cd $(@D) && ./autogen.sh)

$(TMUX)/Makefile: $(TMUX)/configure
	(cd $(@D) && \
	(git diff --quiet && cat $(PWD)/patches/$(TMUX)-*) | patch -p0 && \
	./configure \
		CC="$(CC)" \
		CFLAGS="$(CFLAGS) -I$(COMMON_PREFIX)/include/ncurses" \
		LDFLAGS="$(LDFLAGS)" \
		LIBEVENT_CFLAGS="-I$(COMMON_PREFIX)/include" \
		LIBEVENT_LIBS="-levent" \
		LIBTINFO_CFLAGS="-I$(COMMON_PREFIX)/include/ncurses" \
		LIBTINFO_LIBS="-lncurses" \
		--disable-dependency-tracking \
		--enable-static \
		--sysconfdir=/etc \
	)

$(TMUX)/tmux: $(TMUX)/Makefile
	(cd $(?D) && $(MAKE) -S)

tmux: $(TMUX)/tmux

$(BIN)/tmux: $(TMUX)/tmux
	if [ -n "$(MAN)" ]; then \
		cd $(?D) && \
		$(MAKE) mkdir_p=true INSTALL_DATA=true install-exec-hook && \
		cd .. && \
		cp -f "$$OLDPWD"/tmux.1.* "$(MAN)/man1/tmux.1"; \
	fi
	cp -f $? $@

$(SED)/Makefile: $(SED)/.FOLDER
	(cd $(@D) && \
	./configure \
		CC="$(CC)" \
		CFLAGS="$(CFLAGS)" \
		LDFLAGS="$(LDFLAGS)" \
		--disable-dependency-tracking \
		--disable-nls \
	)

$(SED)/sed/sed: $(SED)/Makefile
	(cd $(?D) && $(MAKE) -S)

sed: $(SED)/sed/sed

$(BIN)/sed: $(SED)/sed/sed
	test -z "$(MAN)" || cp -f "$(SED)/doc/sed.1" "$(MAN)/man1/"
	cp -f $? $@

$(TREE).tar.gz.unverified:
	rm -f $(@:.unverified=)
	$(WGET) -O $@ -nc ftp://mama.indstate.edu/linux/tree/$(TREE).tgz

$(TREE)/.FOLDER: $(TREE).tar.gz
	tar -x -z -f $?
	touch $@

# "-DLINUX" ensures that MB_CUR_MAX is used. The macro is not used by any
# system headers nor is it used for anything else, so it doesn't cause problems
# on other operating systems.
$(TREE)/tree: $(TREE)/.FOLDER
	$(CC) $(CFLAGS) -DLINUX -o $@ $(TREE)/*.c

tree: $(TREE)/tree

$(BIN)/tree: $(TREE)/tree
	if [ -n "$(MAN)" ]; then \
		sed 's/^ \.TP$$/.TP/' $(TREE)/doc/tree.1 \
		  > "$(MAN)/man1/tree.1"; \
	fi
	cp -f $? $@

$(UTF8PROC)/.git:
	if [ -e $@ ]; then \
		touch $@; \
	else \
		git clone -b v$(UTF8PROC_VERSION) https://github.com/JuliaLang/utf8proc.git $(UTF8PROC); \
	fi

$(UTF8PROC)/utf8proc.c $(UTF8PROC)/utf8proc_data.c: $(UTF8PROC)/.git

$(UTF8PROC_WCWIDTH_SO): $(UTF8PROC)/utf8proc.c $(UTF8PROC)/utf8proc_data.c
	(cd $(@D) && $(MAKE) UTF8PROC="$(PWD)/$(UTF8PROC)" -S)

clean-utf8proc-wcwidth:
	if [ -e "$(UTF8PROC_WCWIDTH_SO)" ]; then \
		echo "- $(UTF8PROC_WCWIDTH_SO)"; \
		(cd $(UTF8PROC_WCWIDTH) && $(MAKE) -S clean); \
	fi

$(BIN)/utf8proc-wcwidth.so: $(UTF8PROC_WCWIDTH_SO)
	cp $? $@

$(VIM)/.git:
	git clone -b v$(VIM_VERSION) https://github.com/vim/vim.git $(VIM)

$(VIM)/src/auto/config.h: $(VIM)/.git $(NCURSES)/.BUILT
	(cd $(VIM) && \
	(git diff --quiet && cat $(PWD)/patches/$(VIM)-*) | patch -p0 && \
	./configure \
		CC="$(CC)" \
		CFLAGS="$(CFLAGS) -DFEAT_CONCEAL -DFEAT_TERMGUICOLORS" \
		LDFLAGS="$(LDFLAGS)" \
		ac_cv_header_dlfcn_h="no" \
		--disable-channel \
		--disable-gpm \
		--disable-gtktest \
		--disable-gui \
		--disable-netbeans \
		--disable-nls \
		--disable-selinux \
		--disable-smack \
		--disable-sysmouse \
		--disable-xsmp \
		--enable-multibyte \
		--prefix=/dev/null \
		--with-features=normal \
		--with-tlib=ncurses \
		--without-x \
	)

$(VIM)/src/vim $(VIM)/src/xxd/xxd: $(VIM)/src/auto/config.h
	(cd $(VIM)/src && $(MAKE) -S $(@F:xxd=xxd/xxd))

vim: $(VIM)/src/vim $(VIM)/src/xxd/xxd

$(VIM)/runtime-files: $(VIM)/.git
	(cd $(@D) && \
	printf '%s\n' $(VIM_RUNTIME_EXTRAS) > $(@F) && \
	printf '/^%s =/,/^$$/p;' $(VIM_RUNTIME_TARGETS) \
	  | sed -n -f /dev/fd/0 Filelist >> $(@F))

$(BIN)/vimruntime: $(VIM)/runtime-files
	test -e $(VIM)/vimruntime || ln -f -s runtime $(VIM)/vimruntime
	tar --help 2>&1 | grep -q GNU && from_file="-T" || from_file="-I"; \
	(cd $(VIM) && \
	ls -1 $$(cat $(PWD)/$?) 2>/dev/null \
	| sed -n "s/^runtime/vimruntime/p" \
	| tar -c $$from_file - -f -) | (cd "$(BIN)" && tar -x -m -f -)

$(BIN)/vim: $(BIN)/vimruntime $(VIM)/src/vim
	if [ -n "$(MAN)" ]; then \
		ln -f -s vim.1 "$(MAN)/man1/vi.1"; \
		cp -f "$(VIM)/runtime/doc/vim.1" "$(MAN)/man1/"; \
	fi
	ln -f -s vim "$(BIN)/vi"
	cp -f $(VIM)/src/vim $@

$(BIN)/xxd: $(VIM)/src/xxd/xxd
	test -z "$(MAN)" || cp -f "$(VIM)/runtime/doc/xxd.1" "$(MAN)/man1/"
	cp -f $? $@
