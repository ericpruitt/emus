#!/usr/bin/awk -f

# Usage: git colorized-blame [ANNOTATION_MODE] [OPTIONS] FILE
#        git colorized-blame configure
#
# This script displays colorized blame information for a file. The annotation
# mode controls what information is displayed in the margins. It can be "who",
# "what" (the default) or "when".
#
# To install this script, copy it into a "$PATH" directory, make it executable
# ("chmod +x git-colorized-blame") then run "git colorized-blame configure"
# which will update Git's configuration to enable pagination of this script and
# setup aliases some useful aliases: "git who", "git what" and "git when"
# launch this script with the respective annotation modes; and "git heat"
# produces a heat map in the "what" annotation mode.
#
# Options (and Defaults):
#   -a, --attribution=SELECTION ("author")
#         Change how patches are attributed in the annotations. Using "author"
#         or the shorthand "a" will show the author's name, and using
#         "committer" or the shorthand "c" will show the committer s name.
#   -C[SCORE]
#         Find line copies within and across files. Refer to git-blame(1) for
#         more details about the optional score argument.
#   -c, --committer-name
#         Annotate commits using the committer name instead of the author name.
#   --contents=FILE
#         Use file's contents as the final image. Refer to git-blame(1) for
#         details.
#   -d, --date=SELECTION ("author")
#         Change which timestamp is used for commit dates. Using "author" or
#         the shorthand "a" will show the author timestamp, and using
#         "committer" or the shorthand "c" will show the commit timestamp.
#   -e, --show-email
#         Show the author email instead of author name.
#   -H, --heat-map
#         Color commits based on their age.
#   -M[SCORE]
#         Find line movements within and across files. Refer to git-blame(1)
#         for more details about the optional score argument.
#   -m, --margin=COLUMNS
#         Set the width of the commit summary margin. When this is unspecified,
#         the width varies based on the annotation mode.
#   -N    Hide working-copy line numbers.
#   -n, --show-number
#         Show line numbers from the original commit.
#   --palette=NAME ("vivid" or, for heat maps, "fire")
#         Set the color scheme. The following palettes are supported for the
#         default mode of operation that colors commits to distinguish them
#         from one another:
#         - vivid: Very saturated colors of varying hues.
#         - table: Alternates between a soft purple and gray similar to colors
#           often used for alternating rows in textbook tables.
#         - mode4: Low-intensity yellow, magenta, green and cyan reminiscent of
#           early 8-bit hardware color palettes.
#         - red-weak: Palette optimized for red-weak vision.
#         - green-weak: Palette optimized for green-weak vision.
#         - blue-weak: Palette optimized for blue-weak vision.
#         - red-blind: Palette optimized for red-blind vision.
#         - green-blind: Palette optimized for green-blind vision.
#         - blue-blind: Palette optimized for blue-blind vision.
#
#         Heat maps use a separate set of palettes for their gradients:
#         - fire: Transitions from white through orange to red.
#         - gray: Transitions from gray to white.
#         - viridis: A gradient based on the palette developed by Stéfan van
#           der Walt and Nathaniel Smith of the same name. It transitions from
#           teal to yellow-green.
#         - plasma: A gradient based on the "plasma" variant of viridis that
#           transitions from magenta through pink to orange.
#   --root
#         Do not treat root commits as boundaries.
#   -S FILE
#         Use revisions from revs-file instead of calling git-rev-list(1).
#   -s, --short
#         Show summaries using one line instead of two.
#   -u, --utc
#         Display commit times in UTC. This is essentially an alias for
#         "--timezone=utc".
#   -w    Ignore whitespace differences.
#   -z, --timezone=TYPE ("host")
#         Controls how dates and times are displayed. This can be "host" to
#         indicate they should be displayed using the host's timezone, "author"
#         for the author's time zone or "utc" for UTC. The "host" option is NOT
#         locale aware; the same offset will be used for every commit without
#         regard to things that change the offset like daylight savings or
#         changes by regulatory organizations.
#
# Bugs:
#   Due to the way many AWK interpreters handle command line arguments, the
#   annotation mode may need to be explicitly defined to pass options to this
#   script. For example, if "/usr/bin/awk" is MAWK (currently v1.3.3), running
#   "git colorized-blame --palette=table ..." fails with "mawk: not an option:
#   --palette=table" but "git colorized-blame who --palette=table ..." works as
#   expected. GNU Awk (currently v4.2.1) accepts either form.
#
#   Multi-byte characters may be improperly truncated if the AWK interpreter is
#   not multi-byte safe. Interpreters that are multi-byte safe may delete or
#   pad the wrong number of characters in strings with wide characters. For
#   best results, a multi-byte safe interpreter like GNU Awk is recommended.
#
# Portability:
#   Although the syntax and features of the script itself are POSIX-compliant,
#   date(1) is invoked with "%s" which is not specified in POSIX and with "%z"
#   which is specified for strftime(3) but unfortunately not date(1).

BEGIN {
    #                           --- Options ---

    # Width of the margin on the left that shows messages and hashes. When this
    # is 0, the width is chosen automatically based on the annotation mode.
    MARGIN_WIDTH = 0

    # Controls whether or not line numbers from the working-copy are shown.
    LINE_NUMBERS = 1

    # Controls whether or not line numbers from the original file are shown.
    ORIGINAL_LINE_NUMBERS = 0

    # Timezone to use when displaying date and times:
    # - host: Host's time zone. This is the default.
    # - author: Commit authors time zone.
    # - utc: UTC (+00:00).
    TIMEZONE = "host"

    # Type of information highlighted in commit annotations. This can be "who",
    # "what" or "when".
    ANNOTATION = "what"

    # When verbose mode is enabled, 2 lines of annotations are shown for every
    # commit (where possible) instead of 1.
    VERBOSE = 1

    # Color palette.
    PALETTE = "default"

    # Controls whether time zone offsets are displayed.
    SHOW_TIMEZONE = 0

    # Git invocation used to generate porcelain-formatted blame data.
    GIT_BLAME = "git blame --porcelain"

    # Which name or email address is used for attributions.
    ATTRIBUTION = "author"

    # Which timestamp is used for dates.
    DATE = "author"

    # Determines whether commits are colored using a heat map gradient.
    HEAT_MAP = 0

    # Determines whether email addresses are shown instead of names.
    SHOW_EMAIL = 0

    #                          --- Constants ---

    # This number is used as the maximum width of individual expanded tabs.
    TAB_SIZE = 8

    # Color of lines from the boundary commit.
    BOUNDARY_COMMIT_COLOR = "7"

    # Color of lines that have not been committed.
    UNCOMMITTED_COLOR = "239"

    # Boolean value indicating whether the AWK interpreter supports multi-byte
    # characters.
    MULTIBYTE_SAFE = length("宽") == 1

    # Hash used by Git for lines that have not been committed.
    HASH_OF_UNCOMMITTED_BLOCK = "0000000000000000000000000000000000000000"

    # Default palette
    DEFAULT_PALETTE = "vivid"

    # Default palette for heat maps
    DEFAULT_HEAT_MAP_PALETTE = "fire"

    # Supported color palettes
    PALETTES["vivid"] = "9 10 11 12 13 14 99 157 202 219"
    PALETTES["table"] = "104 245"
    PALETTES["mode4"] = "2 3 5 6"
    PALETTES["red-weak"] = "1 3 5 9 10 13 14 196 219"
    PALETTES["green-weak"] = "1 3 9 10 13 14 196 219"
    PALETTES["blue-weak"] = "9 10 11 13 14 52"
    PALETTES["red-blind"] = "5 10 13 124"
    PALETTES["green-blind"] = "3 14 33 58"
    PALETTES["blue-blind"] = "5 6 9 10 52"

    # Supported heat map gradients with their colors ordered coldest to
    # hottest. Heat map gradients are distinguished by an "H" at the end.
    PALETTES["fire"] = "255 223 216 208 202 196 H"
    PALETTES["gray"] = "240 243 246 249 252 255 H"
    PALETTES["plasma"] = "55 127 162 209 214 226 H"
    PALETTES["viridis"] = "31 36 77 112 148 184 H"
}

# Write a message to standard error and exit with a non-zero status.
#
# Arguments:
# - text: Message to write to standard error.
#
function abort(text)
{
    print "colorized-blame:", text > "/dev/fd/2"
    close("/dev/fd/2")
    exit 1
}

# Quote text so it is interpreted as a literal value by POSIX shells.
#
# Arguments:
# - text: Text to escape.
#
# Returns: Escaped text.
#
function shell_quote(text)
{
    gsub(/'/, "'\"'\"'", text)
    return "'" text "'"
}

# Get the value of a command line option and advance OPTIND to the next
# parameter.
#
# Arguments:
# - kind: The type of expected argument. This should be blank/unspecified for
#   required arguments, "none" for options that do not accept arguments and
#   "optional" for options with optional arguments.
#
# Returns: Value associated with an option.
#
function optarg(kind,   option)
{
    if (kind == "none") {
        if (match(ARGV[OPTIND], "^--[^=]+=")) {
            option = substr(ARGV[OPTIND], 1, RLENGTH - 1)
            abort(option " does not accept an argument")
        }
    } else if (kind == "optional" && ARGV[OPTIND] ~ /^-[^-]$/) {
        return
    } else if (ARGV[OPTIND] ~ /^-[^-]./) {
        return substr(ARGV[OPTIND++], 3)
    } else if (match(ARGV[OPTIND], "^--[^=]+=")) {
        return substr(ARGV[OPTIND++], RLENGTH + 1)
    } else if ((OPTIND + 1) >= ARGC) {
        abort("missing argument for '" ARGV[OPTIND] "'")
    } else {
        OPTIND++
        return ARGV[OPTIND++]
    }
}

# Enable pagination for "git colorized-blame" and configure the aliases "what",
# "when" and "who".
#
function configure_git(    format, name, settings, status, value)
{
    settings["alias.what"] = "colorized-blame what"
    settings["alias.when"] = "colorized-blame when"
    settings["alias.who"] = "colorized-blame who"
    settings["alias.heat"] = "colorized-blame what --heat-map"
    settings["pager.colorized-blame"] = "true"

    print "Configuring Git:"

    for (name in settings) {
        printf "- %s: ", name

        status = system("git config --global --get " name " >/dev/null")

        if (status == 0) {
            print "already defined; skipping"
            continue
        } else if (status != 1) {
            exit status
        }

        value = settings[name]
        status = system("git config --global " name " " shell_quote(value))

        if (status != 0) {
            print "error; aborting operation"
            exit 1
        }

        if (index(name, "alias.") == 1) {
            format = "defined as \"%s\"\n"
        } else {
            format = "set to \"%s\"\n"
        }

        printf format, value
    }

    exit
}

# Analyze the environment, parse parameters in "ARGV" and set the corresponding
# AWK variables. Values in "ARGV" are deleted after being read.
#
function init(    argument, command, optind0)
{
    for (OPTIND = 1; (optind0 = OPTIND) < ARGC; ) {
        if ((argument = ARGV[OPTIND]) == "--") {
            while (OPTIND < ARGC) {
                GIT_BLAME = GIT_BLAME " " shell_quote(ARGV[OPTIND++])
            }
        } else if (argument ~ /^-(a|-attribution(=|$))/) {
            ATTRIBUTION = optarg()
        } else if (argument ~ /^-(d|-date(=|$))/) {
            DATE = optarg()
        } else if (argument ~ /^-(e|-show-email(=|$))/) {
            optarg("none")
            SHOW_EMAIL = 1
        } else if (argument ~ /^-(H|-heat-map(=|$))/) {
            optarg("none")
            HEAT_MAP = 1
        } else if (argument ~ /^-(m|-margin(=|$))/) {
            MARGIN_WIDTH = optarg()
        } else if (argument ~ /^-N/) {
            optarg("none")
            LINE_NUMBERS = 0
        } else if (argument ~ /^-(n|-show-number(=|$))/) {
            optarg("none")
            ORIGINAL_LINE_NUMBERS = 1
        } else if (argument ~ /^--palette(=|$)/) {
            PALETTE = optarg()
        } else if (argument ~ /^-(s|-short(=|$))/) {
            optarg("none")
            VERBOSE = 0
        } else if (argument ~ /^-(u|-utc(=|$))/) {
            optarg("none")
            TIMEZONE = "utc"
        } else if (argument ~ /^-(z|-timezone(=|$))/) {
            TIMEZONE = optarg()
        } else if (argument ~ /^(who|what|when)$/) {
            ANNOTATION = ARGV[OPTIND]
        } else if (argument == "configure") {
            configure_git()

        # Proxy options and arguments intended for git-blame.
        } else if (argument ~ /^-[CM]/) {
            GIT_BLAME = GIT_BLAME \
                " -" substr(argument, 2, 1) shell_quote(optarg("optional"))
        } else if (argument ~ /^-[LS]/) {
            GIT_BLAME = GIT_BLAME \
                " -" substr(argument, 2, 1) shell_quote(optarg())
        } else if (argument ~ /^--(contents|reverse|since)(=|$)/) {
            sub(/=.*$/, "", argument)
            GIT_BLAME = GIT_BLAME " " argument "=" shell_quote(optarg())
        } else if (argument ~ /^--root(=|$)/) {
            optarg("none")
            GIT_BLAME = GIT_BLAME " " argument
        } else if (argument ~ /^-w/) {
            GIT_BLAME = GIT_BLAME " " substr(argument, 1, 2)
        } else if (argument ~ /^--./) {
            sub(/=.*$/, "", argument)
            abort(argument ": option not recognized")
        } else if (argument ~ /^-[^-]/) {
            abort(substr(argument, 1, 2) ": option not recognized")
        } else {
            GIT_BLAME = GIT_BLAME " " shell_quote(argument)
        }

        # If the argument contains multiple short flags, delete the one that
        # was just processed.
        if (OPTIND == optind0 && argument ~ /^-[^-]./) {
            sub(/[^-]/, "", ARGV[OPTIND])

        # Otherwise, advance the cursor if it wasn't already moved by optarg.
        } else if (OPTIND == optind0) {
            OPTIND++
        }
    }

    if (ATTRIBUTION ~ /^a(uthor)?$/) {
        MAIL_FIELD = "author-mail"
        NAME_FIELD = "author"
    } else if (ATTRIBUTION ~ /^c(ommitter)?$/) {
        MAIL_FIELD = "committer-mail"
        NAME_FIELD = "committer"
    } else {
        abort("attribution selection must be \"author\" or \"committer\"")
    }

    if (DATE ~ /^a(uthor)?$/) {
        TIME_FIELD = "author-time"
        TZ_FIELD = "author-tz"
    } else if (DATE ~ /^c(ommitter)?$/) {
        TIME_FIELD = "committer-time"
        TZ_FIELD = "committer-tz"
    } else {
        abort("date selection must be \"author\" or \"committer\"")
    }

    if (PALETTE == "default") {
        PALETTE = HEAT_MAP ? DEFAULT_HEAT_MAP_PALETTE : DEFAULT_PALETTE
    }

    if (!(PALETTE in PALETTES)) {
        abort("unrecognized color palette: " PALETTE)
    }

    if (TIMEZONE == "utc") {
        TIMEZONE_OFFSET = "0000"
    } else if (TIMEZONE == "author") {
        SHOW_TIMEZONE = 1
        TIMEZONE_OFFSET = ""
    } else if (TIMEZONE != "host") {
        abort("timezone selection must be \"author\", \"host\" or \"utc\"")
    }

    if (HEAT_MAP || TIMEZONE == "host") {
        command = "date '+%z %s'"
        command | getline
        close(command)

        if (TIMEZONE == "host") {
            TIMEZONE_OFFSET = $1
        }

        TIMESTAMP = $2
    }

    if (ANNOTATION == "who") {
        MARGIN_WIDTH = MARGIN_WIDTH > 0 ? MARGIN_WIDTH : 25
    } else if (ANNOTATION == "what") {
        MARGIN_WIDTH = MARGIN_WIDTH > 0 ? MARGIN_WIDTH : 60
    } else if (ANNOTATION == "when") {
        MARGIN_WIDTH = MARGIN_WIDTH > 0 ? MARGIN_WIDTH : length(unix2iso(0, 0))
    } else {
        abort("unrecognized annotation mode: " ANNOTATION)
    }

    COLOR_COUNT = split(PALETTES[PALETTE], COLORS)
    COLORS["boundary"] = setaf(BOUNDARY_COMMIT_COLOR)
    COLORS["uncommitted"] = setaf(UNCOMMITTED_COLOR)
    COLORS["reset"] = "\033[m"

    if (HEAT_MAP && COLORS[COLOR_COUNT] != "H") {
        abort(PALETTE " palette cannot be used for heat maps")
    } else if (!HEAT_MAP && COLORS[COLOR_COUNT] == "H") {
        abort(PALETTE " palette can only be used for heat maps")
    }

    FORMAT = "%s%-" MARGIN_WIDTH "s%s"
}

# Return ANSI or XTerm-compatible escape sequence for displaying a color with
# the given index. If an empty string is passed as an argument to this
# function, the escape sequence for the default terminal color is returned.
# Although it would be more portable to use _tput(1)_ here, hard-coded
# sequences are used for performance reasons since they rarely vary on modern
# emulators.
#
# Arguments:
# - n: Color number.
#
# Return: Terminal escape sequence.
#
function setaf(n)
{
    n = int(n + 0)

    if (n < 8) {
        return "\033[" (n + 30) "m"
    } else if (n < 16) {
        return "\033[" (n + 82) "m"
    } else {
        return "\033[38;5;" n "m"
    }
}

# Convert a Unix timestamp into an ISO 8601-formatted date and time. This
# function was derived from Julian day calculations on Wikipedia
# (https://en.wikipedia.org/w/index.php?title=Julian_day&oldid=850807575).
#
# Arguments:
# - timestamp: Unix timestamp representing the time to be displayed.
# - tz: Offset from UTC of the time to be displayed. This should be in the form
#   of `/[+-]HHMM/`.
#   returned string.
#
# Returns: A string formatted as specified by ISO 8601.
#
function unix2iso(timestamp, tz,    D, e, f, g, HH, h, J, M, MM, Y)
{
    timestamp += 3600 * int(tz / 100) + 60 * (tz % 100)

    if (!SHOW_TIMEZONE) {
        tz = ""
    } else if ((0 + tz) == 0) {
        tz = MULTIBYTE_SAFE ? "±0000" : "+0000"
    }

    J = 2440588 + int(timestamp / 86400)

    if (timestamp < 0) {
        timestamp += 86400
        J--
    }

    HH = int((timestamp % 86400) / 3600)
    MM = int((timestamp % 3600) / 60)

    f = J + 1401 + int(int((4 * J + 274277) / 146097) * 0.75) - 38
    e = 4 * f + 3
    g = int((e % 1461) / 4)
    h = 5 * g + 2

    D = int((h % 153) / 5) + 1
    M = ((int(h / 153) + 2) % 12) + 1
    Y = int(e / 1461) - 4716 + int((12 + 2 - M) / 12)
    return sprintf("%4s-%02d-%02d %02d:%02d", Y, M, D, HH, MM) tz
}

# Truncate text so that it contains no more than "width" characters.
#
# Arguments:
# - text: Text to truncate.
# - width: Maximum number of characters allowed in output.
#
# Returns: String or abbreviated version of the string.
#
function truncate(text, width)
{
    gsub(/[\t ]+$/, "", text)

    if (length(text) <= width) {
        return text
    } else if (MULTIBYTE_SAFE) {
        text = substr(text, 1, width - 1)
        gsub(/[\t ]+$/, "", text)
        return text "…"
    } else {
        text = substr(text, 1, width - 3)
        gsub(/[\t ]+$/, "", text)
        return text "..."
    }
}

# Parse a line containing metadata emitted by "git blame --porcelain".
#
function handle_metadata(    days, i, name, spaces, value)
{
    # The length of column 1 is checked because mawk does not support length
    # quantifier brackets ("...{X,Y}").
    if (/^[0-9a-f]+ [0-9]+ [0-9]+( [0-9]+)?$/ && length($1) >= 40) {
        continuation_of_group = hash == $1
        hash = $1
        original_line = $2
        source_line = $3

        if (NF == 4) {
            group_length = $4
        }

        if (!(hash in commits)) {
            commits[hash] = 1
            commits[hash, "boundary"] = 0

            if (!HEAT_MAP) {
                commits[hash, "color"] = color
            }
        }
    } else {
        name = $1
        value = 1

        if (NF > 1) {
            value = substr($0, length(name) + 2)
            sub(/[ \t]+$/, "", value)

            # Expand tabs to simplify visible width calculations.
            while ((i = index(value, "\t"))) {
                spaces = sprintf("%*s", (TAB_SIZE - ((i - 1) % TAB_SIZE)), "")
                sub(/\t/, spaces, value)
            }
        }

        if (name == "summary" && value == "(" hash ")") {
            value = "No commit summary"
        } else if (HEAT_MAP && name == TIME_FIELD) {
            days = (TIMESTAMP - value) / 86400
            commits[hash, "color"] = (days < 2) + (days < 10) + (days < 32) + \
                (days < 93) + (days < 184) + 1
        }

        commits[hash, name] = value
    }
}

# Format two strings as two columns with a maximum width of "MARGIN_WIDTH". If
# the total length of both columns exceeds "MARGIN_WIDTH", the left column will
# be truncated.
#
# Arguments:
# - left: Text in left column.
# - right: Text in right column.
#
# Returns: Line of text formatted as two columns.
#
function format_columns(left, right,    n)
{
    left = truncate(left, MARGIN_WIDTH - length(right))

    for (n = MARGIN_WIDTH - length(left) - length(right); n > 0; n--) {
        left = left " "
    }

    return left right
}

# Generate annotations for the current commit.
#
function annotate(    clock, date, name, offset, rightcol)
{
    name = SHOW_EMAIL ? "" : commits[hash, NAME_FIELD]

    if (!length(name)) {
        name = commits[hash, MAIL_FIELD]
    }

    offset = TIMEZONE_OFFSET

    if (!length(offset)) {
        offset = commits[hash, TZ_FIELD]
    }

    clock = unix2iso(commits[hash, TIME_FIELD], offset)

    # Line 1: Author name or email address.
    # Line 2: Date and the commit summary.
    # Brief: Author name (or email address) and the commit summary.
    if (ANNOTATION == "who") {
        date = substr(clock, 1, 10)
        margins[1] = name
        margins[2] = date ": " commits[hash, "summary"]
        margins["brief"] = name

    # Line 1: Commit summary and the short hash if it fits on the same line.
    # Line 2: Date & time and the author's name or a medium hash if the short
    # hash was not displayed on the first line.
    # Brief: Commit summary truncated as needed and the short hash.
    } else if (ANNOTATION == "what") {
        rightcol = " (" substr(hash, 1, 7) ")"
        margins["brief"] = format_columns(commits[hash, "summary"], rightcol)

        # If the summary is short enough, display it with the short hash on the
        # first margin line then display the time and author on the second
        # line.
        if ((MARGIN_WIDTH - \
          length(commits[hash, "summary"]) - length(rightcol)) >= 0) {
            margins[1] = margins["brief"]
            margins[2] = clock " - " name

        # Otherwise, display a truncated commit summary on the first line
        # then display the time and medium hash on the second line.
        } else {
            margins[1] = commits[hash, "summary"]
            margins[2] = clock " - " substr(hash, 1, 13)
        }

    # Line 1 and brief: Date & time.
    } else if (ANNOTATION == "when") {
        margins["brief"] = substr(clock, 1, MARGIN_WIDTH)
        margins[1] = margins["brief"]
        margins[2] = ""
    }

    if (!VERBOSE) {
        margins[1] = margins["brief"]
        margins[2] = ""
    }
}

# Display a line of source code emitted by "git blame --porcelain".
#
function handle_line(    c, furthest, lineno, margin, previous_color)
{
    margin = ""

    if (LINE_NUMBERS && ORIGINAL_LINE_NUMBERS) {
        lineno = sprintf("%6d  %6d  ", original_line, source_line)
    } else if (LINE_NUMBERS) {
        lineno = sprintf("%6d  ", source_line)
    } else if (ORIGINAL_LINE_NUMBERS) {
        lineno = sprintf("%6d  ", original_line)
    } else {
        lineno = "  "
    }

    $0 = lineno substr($0, 2)

    # The porcelain format treats discontinuities between line numbers in the
    # original file as separate groups even if the lines all come from one
    # commit; for example:
    #
    #   498b29f4a84bfb87192d0e5b736c1150feb2773b 130 130
    #                   git blame "$@"
    #   7c6a9aa87d265ad0460a29c1e14dc23911f76e49 199 131 1
    #               fi
    #   7c6a9aa87d265ad0460a29c1e14dc23911f76e49 202 132 2
    #           }
    #   7c6a9aa87d265ad0460a29c1e14dc23911f76e49 203 133
    #
    # Although lines 131 and 132 come from the same commit, Git treats them as
    # different groups hence the 4th field on both lines and the reason for the
    # "continuation_of_group" guarding the overflow logic.
    if (length(overflow_buffer) && !continuation_of_group) {
        # If there's a line in the overflow buffer and the current group does
        # not have any annotations, the previous group's annotations are
        # allowed to spill into the otherwise empty margins.
        if (commits[hash, "boundary"] || hash == HASH_OF_UNCOMMITTED_BLOCK) {
            printf FORMAT, COLORS[color], margins[1], overflow_buffer
            printf FORMAT, COLORS[color], margins[2], ""

            color = commits[hash, "boundary"] ? "boundary" : "uncommitted"

            print COLORS[color] $0 COLORS["reset"]
            overflow_buffer = ""
            return
        }

        # If the current group also has annotations, use the brief, one-line
        # annotation for the previous group.
        printf FORMAT, COLORS[color], margins["brief"], overflow_buffer
    }

    if (commits[hash, "boundary"]) {
        color = "boundary"
    } else if (hash == HASH_OF_UNCOMMITTED_BLOCK) {
        color = "uncommitted"
    } else if (continuation_of_group) {
        if (length(overflow_buffer)) {
            printf FORMAT, COLORS[color], margins[1], overflow_buffer
        }

        color_locations[color] = source_line
        margin = margins[2]
        margins[2] = ""
    } else {
        annotate()
        margins[1] = truncate(margins[1], MARGIN_WIDTH)
        margins[2] = truncate(margins[2], MARGIN_WIDTH)

        if (HEAT_MAP) {
            color = commits[hash, "color"]
        } else {
            # Reuse the most recently displayed color for the current hash if
            # it has not been used by another hash in the mean time.
            previous_color = commits[hash, "color"]

            if (previous_color != color &&
              commits[hash, "last_line"] == color_locations[previous_color]) {
                color = previous_color

            # Otherwise, pick whichever color was least-recently used.
            } else {
                furthest = source_line

                for (c = 1; c <= COLOR_COUNT; c++) {
                    if (c != color && color_locations[c] < furthest) {
                        furthest = color_locations[c]
                        commits[hash, "color"] = color = c
                    }
                }
            }

            color_locations[color] = source_line
        }

        # If the current group's annotation has two lines but the group is only
        # one line long, add the would-be printed line to the overflow buffer.
        if (length(margins[2]) && group_length == 1) {
            overflow_buffer = $0 COLORS["reset"] "\n"
            commits[hash, "last_line"] = source_line
            return
        }

        margin = margins[1]
    }

    overflow_buffer = ""
    commits[hash, "last_line"] = source_line
    printf FORMAT, COLORS[color], margin, $0 COLORS["reset"] "\n"
}

BEGIN {
    # If the AWK interpreter is not multi-byte safe and doesn't appear be GNU
    # Awk, try to rerun the script with GNU Awk.
    if (!MULTIBYTE_SAFE && !("version" in PROCINFO) &&
      system("command -v gawk >/dev/null") == 0) {

        script = "gawk --exec \"$(command -v git-colorized-blame)\""

        for (OPTIND = 1; OPTIND < ARGC; OPTIND++) {
            script = script " " shell_quote(ARGV[OPTIND])
        }

        exit system(script)
    }

    init()

    color = 1
    hash = ""
    overflow_buffer = ""
    script = "cd \"./${GIT_PREFIX:-.}\" && " GIT_BLAME "; echo '$?='$?"

    for (k = 1; k <= COLOR_COUNT; k++) {
        color_locations[k] = -1
        COLORS[k] = setaf(COLORS[k])
    }

    while ((script | getline)) {
        if (/^\$\?=[0-9]+$/) {
            if (length(overflow_buffer)) {
                printf FORMAT, COLORS[color], margins["brief"], overflow_buffer
            }

            close(script)
            exit substr($0, 4)
        } else if (/^\t/) {
            handle_line()
        } else {
            handle_metadata()
        }
    }

    exit 1
}
