#!/usr/bin/env python3
"""
Usage: pc EXPRESSION...

Python Calculator (pc) is a command line calculator that uses Python as the
evaluation back-end. It only accepts a subset of Python. More specifically, it
only supports variable assignment and operators that work on numbers. To
minimize rounding errors, rational numbers are converted to fractions
internally. In this calculator, "^" and "^=" are exponentiation operators like
"**" and "**=" instead of XOR. All callable methods in the "math" module are
accessible as functions without the module name. For example, to compute the
square root of 2, this tool could be invoked as "pc 'sqrt(2)'". The constant Pi
is also accessible as the identifier "pi", and Euler's constant is accessible
as "e".

Examples:

    $ python3 -c "print(1/9 * 7 + 2/9)"
    0.9999999999999999

    $ pc "1/9 * 7 + 2/9"
    1

    $ pc x="2 + 2" "x * 9"
    36

    $ pc "sin(45 * pi / 180)"
    0.7071067811865475

    $ pc "log(2048, 2)"
    11
"""
import cmath
import decimal
import fractions
import io
import keyword
import math
import os
import re
import sys
import tokenize

SELF = os.path.basename(sys.argv[0])

ASSIGNMENT_OPS = (
    "=", "^=", "*=", "**=", "-=", "+=", "/=", "//=", "<<=", ">>="
)
OPERATOR_WHITELIST = (
    "%", "^", "^=", "*", "*=", "**", "**=", "(", ")", "-", "-=", "+", "+=",
    "=", "/", "/=", "//", "//=", "<", "<<", "<<=", "<=", ">", ">>", ">>=",
    ">=", "!=", "==", ",",
)
TOKEN_WHITELIST = {
    # Assignment Operators
    tokenize.CIRCUMFLEXEQUAL,
    tokenize.DOUBLESLASHEQUAL,
    tokenize.DOUBLESTAREQUAL,
    tokenize.LEFTSHIFTEQUAL,
    tokenize.LESSEQUAL,
    tokenize.MINEQUAL,
    tokenize.PERCENTEQUAL,
    tokenize.PLUSEQUAL,
    tokenize.RIGHTSHIFTEQUAL,
    tokenize.SLASHEQUAL,
    tokenize.STAREQUAL,
    tokenize.ERRORTOKEN,

    tokenize.CIRCUMFLEX,
    tokenize.COMMA,
    tokenize.DEDENT,
    tokenize.DOUBLESLASH,
    tokenize.DOUBLESTAR,
    tokenize.ENCODING,
    tokenize.ENDMARKER,
    tokenize.EQEQUAL,
    tokenize.GREATER,
    tokenize.GREATEREQUAL,
    tokenize.INDENT,
    tokenize.LEFTSHIFT,
    tokenize.LESS,
    tokenize.LESSEQUAL,
    tokenize.LPAR,
    tokenize.MINUS,
    tokenize.NAME,
    tokenize.NEWLINE,
    tokenize.NOTEQUAL,
    tokenize.NUMBER,
    tokenize.OP,
    tokenize.PERCENT,
    tokenize.PLUS,
    tokenize.RIGHTSHIFT,
    tokenize.RPAR,
    tokenize.SEMI,
    tokenize.SLASH,
    tokenize.STAR,
}

ASSIGNMENT_REGEX = re.compile(
    (
        "^\s*([A-Za-z_][A-Za-z0-9_]*)\s*" +
        "|".join(map(re.escape, ASSIGNMENT_OPS)) +
        "\\b"
    ).encode("UTF-8")
)


class Error(Exception):
    """
    Module-specific base exception class.
    """


class AugmentedFraction(fractions.Fraction):
    """
    AugmentedFraction extends to fractions.Fraction to implement support for
    bit-shifting.
    """
    def _shift(self, other, direction=None):
        int_other = int(other)

        if int_other != other:
            raise Error(
                f"Cannot shift a fractional number of bits ({other:g})"
            )

        int_self = int(self)

        if int_self != self:
            raise Error(f"Cannot shift a fractional number ({self:g})")

        if direction == "left":
            return int_self << int_other
        elif direction == "right":
            return int_self >> int_other
        else:
            raise Error(f"{direction!r} is not a valid direction")

    def __format__(self, format_spec):
        return ("%" + format_spec) % self

    def __lshift__(self, other):
        return self._shift(other, direction="left")

    def __rshift__(self, other):
        return self._shift(other, direction="right")


def warn(*args, **kwargs):
    """
    Works the same as the "print" builtin, but the output destination defaults
    to sys.stderr instead of sys.stdout, and the program name is prepended to
    each message.
    """
    kwargs.setdefault("file", sys.stderr)
    print("%s:" % SELF, *args, **kwargs)


def evaluate(expression, context):
    """
    Evaluate an expression and return the result.

    Arguments:
    - expression: Mathematical expression or assignment.
    - context: Dictionary that is used as "globals" in the execution context of
      the expression.

    Returns: The value of the expression.
    """
    expression = expression.strip()
    original_expression = expression

    if isinstance(expression, str):
        readline = io.BytesIO(expression.encode("UTF-8")).readline
    else:
        readline = io.BytesIO(expression).readline

    context["_AugmentedFraction"] = AugmentedFraction
    tokens = []
    column = None

    try:
        for toknum, tokval, (_, column), _, _  in tokenize.tokenize(readline):
            if toknum == tokenize.STRING:
                raise Error("Strings are not supported by the interpreter")

            if toknum not in TOKEN_WHITELIST:
                raise Error(f"Unsupported token {tokval!r} ({toknum})")

            if toknum == tokenize.NUMBER and not tokval.endswith("j"):
                if tokval.startswith("0x"):
                    tokval = int(tokval, 16)
                elif tokval.startswith("0o"):
                    tokval = int(tokval, 8)
                elif tokval.startswith("0b"):
                    tokval = int(tokval, 2)

                tokens.extend((
                    (tokenize.NAME, "_AugmentedFraction"),
                    (tokenize.OP, "("),
                    (tokenize.STRING, repr(tokval)),
                    (tokenize.OP, ")"),
                ))
            elif toknum == tokenize.NAME:
                if tokval.startswith("_"):
                    raise Error(
                        f"Illegal reference to {tokval!r}; starts with '_'"
                    )

                if "__" in tokval:
                    raise Error(
                        f"Illegal reference to {tokval!r}; contains '__'"
                    )

                if keyword.iskeyword(tokval):
                    raise Error(
                        f"Keyword {tokval!r} cannot be used in an expression"
                    )

                tokens.append((toknum, tokval))
            elif toknum == tokenize.OP:
                if tokval not in OPERATOR_WHITELIST:
                    raise Error(f"{tokval!r} is not a supported operator")

                if tokval == "^":
                    tokens.append((tokenize.DOUBLESTAR, "**"))
                elif tokval == "^=":
                    tokens.append((tokenize.DOUBLESTAREQUAL, "**="))
                else:
                    tokens.append((toknum, tokval))
            else:
                tokens.append((toknum, tokval))
    except tokenize.TokenError as error:
        if column is None:
            print(error.args[0], file=sys.stderr)
        else:
            print(expression, file=sys.stderr)
            print(" " * column + "^", error.args[0], file=sys.stderr)

        sys.exit(1)

    expression = tokenize.untokenize(tokens)
    match = ASSIGNMENT_REGEX.match(expression)

    if match:
        result_identifier = match.group(1).decode("UTF-8")

        if result_identifier not in context:
            pass

        elif result_identifier in ("e", "pi"):
            raise Error(f"{result_identifier!r} is a read-only variable")

        elif callable(context[result_identifier]):
            raise Error(
                f"{result_identifier!r} is a read-only, built-in function"
            )
    else:
        expression = b"_ = " + expression
        result_identifier = "_"

    try:
        exec(expression, context)
        return context[result_identifier]
    except SyntaxError:
        pass

    try:
        exec(original_expression, context)
    except SyntaxError as error:
        import traceback
        import textwrap
        lines = traceback.format_exc(limit=0).splitlines()
        message = "\n".join(lines[-3:-1]) + " " + error.msg
        print(textwrap.dedent(message), file=sys.stderr)
        sys.exit(1)


def factorial(x):
    """
    Compute the factorial of a number.

    Arguments:
    - x

    Returns: The factorial of "x".
    """
    if x % 1:
        raise ValueError("Cannot compute factorial of non-integer value")

    if x < 0:
        raise ValueError("Cannot compute factorial of negative value")

    product = 1

    for k in range(1, int(x) + 1):
        product *= k

    return product


def main(expressions):
    if not expressions:
        raise Error("At least one expression must be specified")

    context = dict()

    for module in (math, cmath):
        for name in dir(module):
            attribute = getattr(module, name)

            if callable(attribute) and not name.startswith("_"):
                context[name] = attribute

    context.update({
        "abs": abs,
        "pi": math.pi,
        "e": math.e,
        "fac": factorial,
        "factorial": factorial,
    })

    show_hex = False
    show_octal = False
    show_binary = False

    for expression in expressions:
        if not expression.strip():
            raise Error("Cannot evaluate empty expression")

        try:
            result = evaluate(expression, context)
        except ZeroDivisionError:
            raise Error(f"Division by zero in {expression.strip()!r}")

        show_hex = show_hex or "0x" in expression
        show_octal = show_octal or "0o" in expression
        show_binary = show_binary or "0b" in expression

    if not isinstance(result, complex):
        integral_result = int(result)
    elif result.imag == 0:
        integral_result = int(result.real)
    else:
        integral_result = None

    if integral_result == result:
        alternatives = list()

        if show_hex:
            alternatives.append(hex(integral_result))

        if show_octal:
            alternatives.append(oct(integral_result))

        if show_binary:
            alternatives.append(bin(integral_result))

        if alternatives:
            print(*alternatives, f"({integral_result})")
        else:
            print(integral_result)
    elif isinstance(result, fractions.Fraction):
        fractional_result = str(result)
        decimal.setcontext(decimal.Context(prec=16))
        decimal_result = (decimal.Decimal(result.numerator) /
            decimal.Decimal(result.denominator))

        if len(fractional_result) < 11:
            print(f"{decimal_result} ({fractional_result})")
        else:
            result_str = str(decimal_result)

            if "." in result_str:
                integral, fractional = result_str.split(".")

                if int(fractional) == 0:
                    result_str = integral

            print(result_str)
    else:
        print(result)


if __name__ == "__main__":
    try:
        sys.exit(main(sys.argv[1:]))
    except Error as exception:
        warn(exception)
        sys.exit(1)
