Add support for a new option, "--almost-all-if-not-home", that implicitly shows
dotfiles for every directory except `$HOME`.

--- src/ls.c	2020-03-01 04:30:46.000000000 -0800
+++ src/ls.c	2020-05-14 13:04:20.709426476 -0700
@@ -269,7 +269,7 @@
                               bool *pad);
 static char *make_link_name (char const *name, char const *linkname);
 static int decode_switches (int argc, char **argv);
-static bool file_ignored (char const *name);
+static bool file_ignored (bool is_home, char const *name);
 static uintmax_t gobble_file (char const *name, enum filetype type,
                               ino_t inode, bool command_line_arg,
                               char const *dirname);
@@ -383,6 +383,10 @@
 
 static struct pending *pending_dirs;
 
+// This is used to store the stat information of the user's home directory
+// which will be used to determine when its contents are being listed.
+static struct stat homedir_stat;
+
 /* Current time in seconds and nanoseconds since 1970, updated as
    needed when deciding whether a file is recent.  */
 
@@ -840,7 +844,8 @@
   SI_OPTION,
   SORT_OPTION,
   TIME_OPTION,
-  TIME_STYLE_OPTION
+  TIME_STYLE_OPTION,
+  ALMOST_ALL_IF_NOT_HOME
 };
 
 static struct option const long_options[] =
@@ -888,6 +893,7 @@
   {"block-size", required_argument, NULL, BLOCK_SIZE_OPTION},
   {"context", no_argument, 0, 'Z'},
   {"author", no_argument, NULL, AUTHOR_OPTION},
+  {"almost-all-if-not-home", no_argument, NULL, ALMOST_ALL_IF_NOT_HOME},
   {GETOPT_HELP_OPTION_DECL},
   {GETOPT_VERSION_OPTION_DECL},
   {NULL, 0, NULL, 0}
@@ -953,6 +959,8 @@
   size_t *col_arr;
 };
 
+static bool almost_all_if_not_home;
+
 /* Array with information about column filledness.  */
 static struct column_info *column_info;
 
@@ -1647,6 +1655,8 @@
   current_time.tv_sec = TYPE_MINIMUM (time_t);
   current_time.tv_nsec = -1;
 
+  almost_all_if_not_home = false;
+
   i = decode_switches (argc, argv);
 
   if (print_with_color)
@@ -1756,6 +1766,9 @@
   else if (n_files <= 1 && pending_dirs && pending_dirs->next == 0)
     print_dir_name = false;
 
+  if (!almost_all_if_not_home || !getenv("HOME") || stat(getenv("HOME"), &homedir_stat) < 0)
+    homedir_stat.st_dev = homedir_stat.st_ino = 0;
+
   while (pending_dirs)
     {
       thispend = pending_dirs;
@@ -2275,6 +2288,10 @@
           print_scontext = true;
           break;
 
+        case ALMOST_ALL_IF_NOT_HOME:
+          almost_all_if_not_home = true;
+          break;
+
         case_GETOPT_HELP_CHAR;
 
         case_GETOPT_VERSION_CHAR (PROGRAM_NAME, AUTHORS);
@@ -2906,22 +2923,25 @@
       return;
     }
 
-  if (LOOP_DETECT)
-    {
-      struct stat dir_stat;
-      int fd = dirfd (dirp);
+  struct stat dir_stat;
+  int fd = dirfd (dirp);
 
-      /* If dirfd failed, endure the overhead of stat'ing by path  */
-      if ((0 <= fd
-           ? fstat_for_ino (fd, &dir_stat)
-           : stat_for_ino (name, &dir_stat)) < 0)
-        {
-          file_failure (command_line_arg,
-                        _("cannot determine device and inode of %s"), name);
-          closedir (dirp);
-          return;
-        }
+  /* If dirfd failed, endure the overhead of stat'ing by path  */
+  if ((0 <= fd
+       ? fstat_for_ino (fd, &dir_stat)
+       : stat_for_ino (name, &dir_stat)) < 0)
+    {
+      file_failure (command_line_arg,
+                    _("cannot determine device and inode of %s"), name);
+      closedir (dirp);
+      return;
+    }
+
+  bool is_home = (dir_stat.st_ino == homedir_stat.st_ino &&
+                  dir_stat.st_dev == homedir_stat.st_dev);
 
+  if (LOOP_DETECT)
+    {
       /* If we've already visited this dev/inode pair, warn that
          we've found a loop, and do not process this directory.  */
       if (visit_dir (dir_stat.st_dev, dir_stat.st_ino))
@@ -2973,7 +2993,7 @@
       if (next)
         {
           found_any_entries = true;
-          if (! file_ignored (next->d_name))
+          if (! file_ignored (is_home, next->d_name))
             {
               enum filetype type = unknown;
 
@@ -3107,11 +3127,11 @@
 /* Return true if FILE should be ignored.  */
 
 static bool
-file_ignored (char const *name)
+file_ignored (bool is_home, char const *name)
 {
   return ((ignore_mode != IGNORE_MINIMAL
            && name[0] == '.'
-           && (ignore_mode == IGNORE_DEFAULT || ! name[1 + (name[1] == '.')]))
+           && (ignore_mode == IGNORE_DEFAULT && (!almost_all_if_not_home || is_home || ! name[1 + (name[1] == '.')])))
           || (ignore_mode == IGNORE_DEFAULT
               && patterns_match (hide_patterns, name))
           || patterns_match (ignore_patterns, name));
