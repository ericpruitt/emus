#!/usr/bin/mawk -f
# This script is designed to be used with Vim's "formatprg" option. It reads
# text from standard input, formats the text and writes the text to standard
# output. In addition to formatting plain text files, the script also supports
# formatting code that uses C/C++ style comments (i.e. "//..." and "/* ... */")
# and comment-only lines denoted with "#".
#
# User-specifiable variables:
#
# - FORMAT: Format of the text in the file being edited. The valid values for
#   this are "c", "generic" and "plain:"
#   - c: text file that supports C/C++ style comments. The format internally
#     falls back to "plain" if the first non-blank line does not begin with a
#     C/C++ style comment so blocks of text inside of /* ... */ without leading
#     asterisks (*) on each line can be wrapped like a normal, plain-text file
#     which is likely what most users want to happen. If the first non-blank
#     line of the input is a comment, all of the following lines that are not
#     comment are left unchanged.
#   - generic: text file supports comments marked by a spaces and then a
#     certain string of characters. The supported comment strings are "#",
#     "--", "//", ";" and '"'. The string used for comments is automatically
#     detected, and lines that do not match the expected comment format are
#     left unchanged.
#   - plain: text file format that does not support comments.
#
# - MARKDOWN: When this is a non-zero value, all formatted text is treated as
#   Markdown so things like code blocks, headers and link references are left
#   untouched.
# - TAB_STOP: Leading tabs will be expanded to the number of spaces specified
#   in this variable. If this value is less than 1, it will be set to 1.
# - TEXT_WIDTH: Last column that may contain printable characters. This
#   defaults to 79.
#
# These variables are set using awk's "-v" option. In the following example,
# the text width is set to 72 and the comment format to C/C++:
#
#   vifmt -v TEXT_WIDTH=72 -v FORMAT=c
#
# This script is POSIX-Awk compatible, but mawk is used in the shebang line
# since it tends to be faster than gawk which is often symlinked from
# .../bin/awk on Linux systems.
#
# This script works similarly to Vim's built-in formatting, but it supports
# wrapping text with two columns, specifically for formatting command line tool
# usage information, and it also supports list-specific wrapping inside of
# source code comments.
#
BEGIN {
    if (FORMAT !~ /^(c|generic|plain)$/) {
        print "vifmt: unrecognized format: " FORMAT > (stderr = "/dev/fd/2")
        close(stderr)
        exit 1
    }

    TAB_STOP = int(TAB_STOP) < 1 ? 8 : int(TAB_STOP)
    TEXT_WIDTH = int(TEXT_WIDTH) < 1 ? 79 : int(TEXT_WIDTH)

    TOKEN_TO_FORMAT["/*"]   = "c"
    TOKEN_TO_FORMAT["/**"]  = "c"

    TOKEN_TO_FORMAT["#"]    = "generic"         # Shell, AWK, Python, etc.
    TOKEN_TO_FORMAT["--"]   = "generic"         # SQL
    TOKEN_TO_FORMAT["//"]   = "generic"         # Go
    TOKEN_TO_FORMAT[";"]    = "generic"         # Assembly, INI files
    TOKEN_TO_FORMAT["\""]   = "generic"         # Vim

    USAGE_BODY = 1
    USAGE_FIRST_PARAGRAPH = -1

    # Lowercase forms of these words words are ignored as long as when
    # assessing if a given string is a title as long as they are not the first
    # word.
    TITLE_CASE_IGNORED_REGEX = "( (" \
        "a|is|and|for|to|the|for|nor|but|so|by|as|in|out|per|at|via" \
    ")( |$))+"

    _["ATX header"] = "^##?#?#?#?#? "
    _["Header or horizontal rule"] = "^(===+|---+|\\*\\*\\*+|___+)$"
    _["Indented code block"] = "^    ([^*-]|[-*]([^ \t]|$))"
    _["Link reference"] = "^ ? ? ? ?[[^][ \t]+]: "
    MARKDOWN_INLINE_VERBATIM_REGEX = join("|", _)
}

# Combine all values in an array with a delimiter.
#
# Arguments:
# - delimiter: String that will separate each array element.
# - array: Array to be joined with delimiter.
#
# Return: All values of "array" joined with "delimiter."
#
function join(delimiter, array,    key, output)
{
    for (key in array) {
        output = output ? output delimiter array[key] : array[key]
    }

    return output
}

# Print text wrapped so the last occupied column is "TEXT_WIDTH."
#
# Arguments:
# - text: Text to be wrapped and printed. The leading white space in this value
#   determines how text will be indented when it is displayed. If it appears
#   the text contains two columns, lines a wrapped so they begin at the left
#   edge of the second column. In either case, all subsequent white space has
#   no impact on text alignment.
# - comment: If "text" is part of a comment, this value contains the characters
#   from the beginning of the line through (and including) the first space
#   after the comment. It will be added to the left margin of all printed
#   lines. C/C++-style comments have special handling so "/*" is only used on
#   the first line of output.
#
function wrap(text, comment,    c, columns, eol, leader, cfix, n, pad, width)
{
    cfix = (FORMAT == "c") ? index(comment, "/*") : 0
    leader = ""
    pad = ""
    width = 0

    if (match(text, /^[ \t]+/)) {
        pad = substr(text, RSTART, RLENGTH)
        text = substr(text, RSTART + RLENGTH)
    }

    # Detect lists denoted with "-"
    if (text ~ /^[*-] /) {
        leader = substr(text, 1, 1) " "
    # Detect blocks of text with two columns
    } else if (match(text, /  ([^ ] |[^ ][^ ])+  +|  +/)) {
        leader = substr(text, 1, RSTART + RLENGTH - 1)
    }

    if (length(leader)) {
        text = substr(text, length(leader) + 1)
    }

    n = split(text, columns)
    leader = pad leader
    eol = TEXT_WIDTH - length(leader) - length(comment)
    if (match(pad, /^\t+/)) {
        eol -= (TAB_STOP - 1) * RLENGTH
    }

    for (c = 1; c <= n; c++) {
        if (!width && length(columns[c]) >= eol) {
            print comment leader columns[c]
        } else {
            width = width + length(columns[c])
            if (c == 1 || width >= eol) {
                width = length(columns[c])
                if (c != 1) {
                    print ""
                }
                printf "%s", comment leader columns[c]
            } else {
                width = width + 1
                printf " %s", columns[c]
            }
            if (c == n) {
                print ""
            }
        }

        if (cfix) {
            cfix = 0
            sub("/", " ", comment)
        }

        # The original contents of the leader are only shown for the first
        # line of wrapped text. After that, it becomes a set of spaces to align
        # subsequent lines.
        gsub(/[^ \t]/, " ", leader)
    }
}

# Return a value indicating whether or not it appears a string of text is a
# title.
#
# Arguments:
# - text: Text to test.
#
# Return: 1 if it appears "text" is a title and 0 otherwise.
#
function is_title(text)
{
    gsub(TITLE_CASE_IGNORED_REGEX, " ", text)
    return text ~ /^[ ]*[A-Z][^ \t]*( [A-Z][^ \t]*)*$/
}

{
    comment = ""

    if (FORMAT != "plain" && !length(COMMENT_REGEX) && NF) {
        if (FORMAT == "c" || ((guess = TOKEN_TO_FORMAT[$1]) == "c")) {
            if (FORMAT == "c" && $1 !~ /^(\/\*\*?|\*|\/\/)$/) {
                FORMAT = "plain"
            } else {
                COMMENT_REGEX = "^([ \t]*/?(\\*|//)( |$))"
                FORMAT = (FORMAT == "c") ? FORMAT : guess
            }
        } else if (guess) {
            COMMENT_REGEX = "^[ \t]*" $1 "( |$)"
        } else {
            print
            next
        }
    }

    if (length(COMMENT_REGEX) && match($0, COMMENT_REGEX)) {
        verbatim = 0
        comment = substr($0, RSTART, RLENGTH)
        text = substr($0, RSTART + RLENGTH)
        if (substr(comment, length(comment), 1) != " ") {
            comment = comment " "
        }

        if ((comment != buffer_comment) && !length(buffer_comment)) {
            buffer_comment = comment
            is_usage = (is_usage == USAGE_FIRST_PARAGRAPH) ? is_usage : 0
        }
    } else if (buffer_comment) {
        verbatim = 1
        wrap(buffer, buffer_comment)
        buffer = ""
        buffer_comment = ""
    } else {
        verbatim = length(COMMENT_REGEX)
        text = $0
    }

    sub(/[ \t]+$/, "", text)
    is_blank = !length(text)
    reset = 0

    # When processing usage information in a file that contains comments, stop
    # assuming text is part of the usage information upon reaching the first
    # blank or uncommented line.
    if (is_usage == USAGE_BODY && FORMAT != "plain" && (!NF || verbatim)) {
        is_usage = 0
    }

    # The first paragraph of a usage block is reprinted verbatim.
    if (!is_usage && index(text, "Usage:") == 1) {
        is_usage = USAGE_FIRST_PARAGRAPH
        verbatim = 1
    } else if (is_usage == USAGE_FIRST_PARAGRAPH) {
        if (is_blank) {
            is_usage = 1
        } else {
            verbatim = 1
        }

    } else if (is_usage && !is_blank) {
        # A line with two columns marks the beginning of a new block of lines.
        if (match(text, /[^ \t]  +[^ \t]/)) {
            edge = RSTART + RLENGTH - 1
            reset = 1
        # A change in indent level marks the beginning of a new block.
        } else if (match(text, /^[ \t]*/)) {
            this_edge = RSTART + RLENGTH
            reset = this_edge != edge
            edge = this_edge
        }

        if ((colon = index(text, ":"))) {
            # Lines that appear to be section titles are reprinted verbatim.
            verbatim = verbatim || (colon == length(text) ? is_title(text) : 0)
            # Lines that appear to be metadata (things like "Author: ...",
            # "License: ...", etc.) mark the beginning of a new block.
            reset = reset || verbatim || is_title(substr(text, 1, colon - 1))
        }
    }

    if (!is_usage && MARKDOWN) {
        verbatim = verbatim || length(fenced_code_block)

        if (!verbatim && match(text, MARKDOWN_INLINE_VERBATIM_REGEX)) {
            # A line made entirely of "=" or "-" after a line of text indicates
            # that the preceding line was a header and should be printed as-is.
            if (text ~ /^[=-]/ && length(buffer)) {
                print buffer
                buffer = ""
                buffer_comment = ""
            }
            verbatim = 1
        } else if (text ~ /^(~~~+|```+)$/) {
            verbatim = 1
            if (length(fenced_code_block)) {
                if (index(text, fenced_code_block)) {
                    fenced_code_block = ""
                }
            } else {
                fenced_code_block = substr(text, 1, 3)
            }
        }
    }

    if (is_blank || verbatim || reset || text ~ /^[ \t]*(([*-]|[0-9]+\.) )/) {
        wrap(buffer, buffer_comment)
        buffer = ""

        # For C/C++ style block comments, "/*" should only be used for the
        # first line.
        if (FORMAT == "c" && index(buffer_comment, "/*")) {
            sub(/\//, " ", buffer_comment)
        }
    }

    if (verbatim) {
        print
    } else if (is_blank) {
        gsub(/[ \t]+$/, "", comment)
        print comment
    } else if (length(buffer)) {
        gsub(/^[ \t]+|[ \t]+$/, "", text)
        buffer = buffer " " text
    } else {
        buffer = text
    }
}

END {
    if (length(buffer)) {
        wrap(buffer, buffer_comment)
    }
}
