#!/usr/bin/env bash
# This script wraps Git to implement some new commands and manipulate the
# default behavior of built-ins.
shopt -s extglob

# Path of canonical Git binary.
declare -g CANONICAL_GIT="${CANONICAL_GIT:-/usr/bin/git}"

# Pull from the default remote branch overwriting any local changes.
#
#   $1  This must be "-f" or "--force" to make this command overwrite unsaved
#       changes.
#
function git-force-pull()
{
    local flag="${1:-}"

    if [[ "$#" -gt 1 ]] || [[ "$#" -eq 1 && "$1" != +(-f|--force) ]]; then
        echo "Usage: git force-pull [-f|--force]"
        return 1
    elif [[ "${1:-}" != *f* ]] && ! git diff --quiet; then
        echo "There are unsaved changes, and --force was not specified."
        return 1
    fi

    git fetch --all
    git reset --hard "$(git remote)/$(git branch | awk '/\*/ {print $2}')"
}

# Easily create and merge checkpoint commits. The checkpoints have no message
# associated with them and are intended to be squashed with a more descriptive
# commit message before being pushed upstream. When no arguments are specified,
# a checkpoint commit is created.
#
#   $1  Command: this can be "commit," "reset," "pick" or omitted. When this
#       is "commit," a soft-reset is done on all checkpoint commits, and then
#       git-commit is executed. When the command is "reset," all checkpoint
#       commits are reset without executing git-commit. When the command is
#       "pick," only files explicitly added wit git-add are included in the
#       checkpoint; normally, the checkpoint is created with `git commit -a`.
#   $@  When the command is "commit," these arguments are passed to git-commit.
#
function git-checkpoint()
{
    local commit
    local flags

    local command="${1:-}"

    case "$command" in
      commit|reset)
        shift
        if ! git log --format="%H%s" | egrep -q '^[a-f0-9]{40}$' &&
          [[ "${PIPESTATUS[1]}" -ne 0 ]]; then
            echo "No checkpoints found." >&2
            exit 1
        fi

        commit="$(git log --format="%H%s" | egrep -vm1 '^[a-f0-9]{40}$')" || :
        git reset --soft "${commit:0:40}"
        test "$command" != "commit" || git commit --untracked-files=no -v "$@"
      ;;
      *)
        if [[ "$#" -gt 1 ]] || [[ "$command" && "$command" != "pick" ]]; then
            echo "Usage: git checkpoint [commit|reset|pick]"
            exit 1
        fi

        test "$command" == "explicit" || flags="-a"
        git commit --allow-empty-message -m "" ${flags:-}
        echo "Checkpoint created."
      ;;
    esac
}

# List files like _ls(1)_, but only files tracked by Git will be shown.
#
#   $@  Paths and / or options understood by _ls(1)_.
#
function git-ls()
{
    local arg
    local -a ls_flags
    local original_arg
    local -a paths

    local no_more_flags=""

    for original_arg in "$@"; do
        # Strip any trailing slashes, and only add one back if the argument is
        # a physical (vs. symlink) directory.
        arg="${original_arg%%+(/)}"
        if [[ -d "$arg" ]] && ! [[ -L "$arg" ]]; then
            arg="$arg/"
        fi

        if [[ "$no_more_flags" ]]; then
            paths+=("$arg")
        elif [[ "$arg" = "--" ]]; then
            no_more_flags="x"
        elif [[ "$arg" = -* ]] || ! [[ -e "$arg" ]]; then
            ls_flags+=("$original_arg")
        else
            paths+=("$arg")
        fi
    done

    git ls-tree -z --name-only HEAD -- ${paths[@]+"${paths[@]}"} \
      | xargs -0 ls --color=auto -d ${ls_flags[@]+"${ls_flags[@]}"} --
}

# Make the commit file verbose by default, and do not include information about
# untracked files.
#
function git-commit()
{
    git commit --untracked-files=no --verbose "$@"
}

# This function works mostly like the regular status command, but when no
# arguments are supplied, the default output shows branch information and
# removes usage hints.
#
function git-status()
{
    if [[ "$#" -gt 0 ]] || ! [[ -t 1 ]]; then
        git "$@"
        return
    fi

    echo "Branches:"
    git branch -a -v
    echo
    git -c color.status=always status \
      | sed -e 's/(use "git.*//g' -e '/^[ \t]\+$/d' -e '/^On branch/d'
}

# Display a colorized git-blame.
#
# Options:
# - -m, --margin=COLS: Set the width of the commit summary margin.
# - -s, --short: Show commit summaries using one line instead of two.
# - -u, --utc: Display commit times in UTC.
# - -z, --tz=TIMEZONE: Set the time zone used when displaying commits.
#
# **Note:** Short options cannot be combined with one another.
#
# The terms "who", "what" (default) and "when" can be used to change the type
# of commit summary shown. If there is a file with the same name as the
# argument used, the summary type must be the first argument. Otherwise, it can
# appear anywhere options may be used.
#
# If standard output is not a TTY, the traditional output of git-blame is used.
#
function git-blame()
{
    local argument
    local blame_args

    local awk_args=()
    local -i index=0
    local next=""

    for argument in "$@"; do
        let ++index

        if [[ -n "$next" ]]; then
            eval "next=''; awk_args+=('-v' \"$next=\$argument\")"
        elif [[ "$argument" = @(who|what|when) ]] && [[ "$index" -eq 1 ||
          ! -e "$argument" ]]; then
            awk_args+=("-v" "HIGHLIGHT=$argument")
        elif [[ "$argument" = @(-u|--utc) ]]; then
            awk_args+=("-v" "OUTPUT_TIMEZONE=utc")
        elif [[ "$argument" = @(-s|--short) ]]; then
            awk_args+=("-v" "VERBOSE=0")
        elif [[ "$argument" = @(-z*|--tz?(=*)) ]]; then
            next="OUTPUT_TIMEZONE"
        elif [[ "$argument" = @(-m*|--margin?(=*)) ]]; then
            next="MARGIN_WIDTH"
        elif [[ "$argument" = --palette?(=*) ]]; then
            next="PALETTE"
        elif [[ "$argument" = "--" ]]; then
            blame_args+=("${@:$index}")
            break
        else
            blame_args+=("$argument")
            continue
        fi

        if [[ "$next" ]] && [[ "$argument" = @(-[!-]?*|--*=*) ]]; then
            eval "next=''; awk_args+=(\"-v$next=\${argument#@(-[!-]|--*=)}\")"
        fi
    done

    if [[ -t 1 ]]; then
        git blame --porcelain "${blame_args[@]}" \
        | git-blame-colorizer "${awk_args[@]}" \
        | $(git config --get "core.pager" || echo ${PAGER:-less})

        return "${PIPESTATUS[0]}"
    fi

    git blame "${blame_args[@]}"
}

# Stand-in function that calls the canonical Git binary to eliminate infinite
# loops.
#
#   $@  Arguments for _git(1)_
#
function git()
{
    "$CANONICAL_GIT" "$@"
}

function main()
{
    local command="${1:-}"

    local git

    set -e -u -o pipefail

    if ! [[ -e "$CANONICAL_GIT" ]]; then
        for git in $(which -a git); do
            test ! "$git" -ef "$0" && CANONICAL_GIT="$git" && break
        done

        test -z "$CANONICAL_GIT" && echo "Could not find Git binary." && exit 1
    fi

    if [[ "$(type -t "git-$command")" = "function" ]]; then
        shift
        "git-$command" "$@"
    else
        git "$@"
    fi
}

test "${BASH_SOURCE:-}" != "$0" || main "$@"
