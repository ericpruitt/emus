#!/bin/sh
set -e -u

DRY_RUN=""
SELF="${0##*/}"

# Write a message prefixed with the command name to standard error and return a
# non-zero exit status.
#
# Arguments:
# - $1: Message to display.
#
die()
{
    echo "$SELF: $1" >&2 && return 1
}

# Configure the value of SHA256.
#
# Variables:
# - SHA256: Command that computes the SHA-256 hash of a file. If this value is
#   unset, the script will check to see if several common commands are
#   available, returning a non-zero exit status if not suitable command is
#   found. Once this variable has been set be it automatically or by the user,
#   a sanity check if performed using a test vector with a known hash. The
#   function will finish with a non-zero return code if the sanity check fails.
#
configure_sha256()
{
    if [ -n "${SHA256:=}" ]; then
        :
    elif command -v openssl >/dev/null 2>&1; then
        SHA256="openssl dgst -sha256"
    elif command -v sha256 >/dev/null 2>&1; then
        SHA256="sha256"
    elif command -v sha256sum >/dev/null 2>&1; then
        SHA256="sha256sum --tag"
    else
        die "unable to find command for SHA-256 hashing"
    fi

    if ! printf x | $SHA256 | grep -q \
      "2d711642b726b04401627ca9fbac32f5c8530fb1903cc4db02258717921a4881"; then
        die "${SHA256% }: sanity test failed; output did not match test vector"
    fi
}

# Configure the value of COMPAT.
#
# Variables:
# - COMPAT: A list of platform-specific build targets.
#
configure_compat()
{
    test -z "${COMPAT:-}" || return 0

    case "$PLATFORM" in
      *-linux-*)
        COMPAT="utf8proc-wcwidth/utf8proc-wcwidth.so"
      ;;
    esac
}

# Configure the value of MAKE and GMAKE.
#
# Variables:
# - MAKE: POSIX-compatible Make command.
# - GMAKE: GNU Make command. If this value is already set, the function will
#   verify that the command actually invokes GNU Make and return a non-zero
#   exit status if the command is not GNU Make. If this value is unset, the
#   function will attempt to find GNU Make and set the value accordingly.
#
configure_make()
{
    MAKE="${MAKE:-make}"

    if [ "${GMAKE:=}" = " " ]; then
        # If GMAKE is a space, that means the user explicitly unset it.
        GMAKE=""
    elif [ -n "$GMAKE" ]; then
        # If GMAKE is set, verify that it's actually GNU Make.
        $GMAKE -v 2>&1 | grep -q "GNU Make" || die "GMAKE is not GNU Make"
    else
        # If GMAKE is not set, try to find GNU Make.
        for GMAKE in "$MAKE" make gmake ""; do
            $GMAKE -v 2>&1 | grep -q "GNU Make" && break
        done
    fi

    test "$MAKE" != "make" || MAKE=""
    test -n "$MAKE" -o "$GMAKE" != "make" || GMAKE='$(MAKE)'
}

# Configure the value of CC.
#
# Variables:
# - CC: C compiler command. The default value is "cc" on all platforms except
#   Linux. On Linux, this defaults to the path of the musl libc compiler
#   wrapper. If the configuration script is not in dry-run mode, the wrapper
#   will be configured automatically.
#
configure_cc()
{
    test -z "${CC:-}" || return 0
    CC="cc"

    case "$PLATFORM" in
      *-linux-*)
        CC="$PWD/$(make -s -f Makefile.in musl-cc)"

        test -z "$DRY_RUN" || return 0
        test -n "$GMAKE" || die "GNU Make needed for musl; set GMAKE or MAKE"
        test "$GMAKE" = '$(MAKE)' && make="make" || make="$GMAKE"

        $make -s -f Makefile.in CC="cc" musl
      ;;
    esac
}

# Configure the values of CFLAGS and LDFLAGS.
#
# Variables:
# - CFLAGS: C compiler flags. When this is unset, this function will use a
#   platform-specific value.
# - LDFLAGS: Object file linker flags. When this is unset, this function will
#   use a platform-specific value.
# - CCOPTFLAGS: Compiler optimization flags that are prepended to CFLAGS. This
#   defaults to "-O3".
#
configure_cflags_ldflags()
{
    if [ -z "${CFLAGS:-}" ] || [ -z "${LDFLAGS:-}" ]; then
        case "$PLATFORM: $(exec 2>&1; $CC -dumpspecs || $CC -v)" in
          macos*)
            _CFLAGS=""
            _LDFLAGS=""
          ;;

          freebsd*)
            _CFLAGS="-static"
            _LDFLAGS="-static"
          ;;

          *[!f]no-pie*|*clang*)
            _CFLAGS="-static -fno-pie -fPIC"
            _LDFLAGS="-static -no-pie"
          ;;

          *[!f]nopie*)
            _CFLAGS="-static -fno-pie -fPIC"
            _LDFLAGS="-static -nopie"
          ;;

          *)
            _CFLAGS="-static"
            _LDFLAGS="-static"
          ;;
        esac
    fi

    CFLAGS="-I\$(COMMON_PREFIX)/include ${CCOPTFLAGS:--O3} ${CFLAGS:-$_CFLAGS}"
    LDFLAGS="-L\$(COMMON_PREFIX)/lib ${LDFLAGS:-$_LDFLAGS}"
}

# Test whether or not a Make implementation executes all commands for a given
# recipe in one shell. The exit status of the function is 0 if one shell is
# used, and a non-zero value otherwise. This function produces no output.
#
# Variables:
# - MAKE: Command used to run Make. This defaults to "make".
#
# Arguments:
# - $@: Any arguments passed to the function are appended to the Make command.
#
uses_one_shell()
{
    echo 'uses-one-shell:
			uses_one_shell=true
			$${uses_one_shell:-false}' \
    | env -i ${MAKE:-make} "$@" -f - >/dev/null 2>&1
}

# Edit the Makefile template and insert configured variables as needed. The
# generated Makefile is written to standard output.
#
generate_makefile()
{
    # GNU Make treats "$TARGET" and "./$TARGET" as references to a single
    # target while some BSD Make variants treat them as two distinct targets.
    # If GNU Make is installed, it will be used in place of BSD Make where BSD
    # Make might otherwise fail. If GNU Make is not installed, a shim is used
    # to emulate GNU Make's behavior.
    if [ -z "$GMAKE" ]; then
        GMAKE='$(MAKE) MAKE="$(MAKE) -f Makefile -f $(PWD)/fake-gmake.mk"'
    fi

    # BSD Make implementations that support parallel recipe execution disable
    # POSIX compatibility mode when the non-POSIX option "-j" is used. When
    # compatibility mode is disabled, one shell is used for all commands in a
    # recipe which causes problems when recipes contain commands like "cd" that
    # modify the environment. Compatibility mode can be re-enabled with "-B",
    # and this logic detects the aforementioned behavior and adds "-B" to MAKE
    # as needed.
    uses_one_shell -j2 && ! uses_one_shell -j2 -B && MAKE="${MAKE:-make} -B"

    while IFS="" read -r line; do
        case "$line" in
          # The "D" directory part modifier is specified by POSIX, but
          # OpenBSD's Make does not support it when used with $? and thus
          # requires a shim.
          .POSIX:)
            if [ -z "$(echo 'x:.;echo $(?D)' | ${MAKE:-make} -s -f -)" ]; then
                line="$(printf "%s\n%s" "$line" '?D = ${?:H}')"
            fi
          ;;

          # Static linking on macOS is not well supported, so the corresponding
          # configuration flags must be removed.
          [!#]*--enable-static*)
            case "$PLATFORM" in
              macos-*)
                continue
              ;;
            esac
          ;;

          # Replace commented variables with their proper values or delete them
          # if they are explicitly defined.
          [#]*=)
            set -- $line
            variable="$2" && eval "value=\"\${$variable:-}\""
            test -z "$value" || echo $variable = $value && continue
          ;;
        esac

        printf "%s\n" "$line"
    done < Makefile.in
}

# Write configuration script documentation to standard output.
#
usage()
{
    echo "Usage: $SELF [OPTION] [VARIABLE=[VALUE]]..."
    echo "Generate a Makefile configured for this platform."
    echo
    echo "Options:"
    echo "  -h  Display this text and exit."
    echo "  -n  Dry run; display the generated configuration without saving."
    echo
    echo "Variables:"
    echo "  CC          C compiler command"
    echo "  CCOPTFLAGS  Compiler optimization flags"
    echo "  CFLAGS      Compiler flags"
    echo "  LDFLAGS     Linker flags"
    echo
    echo "  COMPAT      Platform-specific build targets"
    echo "  GMAKE       GNU Make command"
    echo "  MAKE        POSIX-compatible Make command"
    echo "  SHA256      SHA-256 hashing command"
    echo
    echo "Environment Variables:"
    echo "  If any configurable variables are defined in the environment as"
    echo "  non-null strings, they will take precedence over the values that"
    echo "  would otherwise by generated by this script. To set these values"
    echo "  to null strings, use parameter variable assignment instead."
}

main()
{
    for argument in "$@"; do
        case "$argument" in
          CC=*|CCOPTFLAGS=*|CFLAGS=*|GMAKE=*|LDFLAGS=*|MAKE=*|SHA256=*)
            # The space after "}" makes it possible to null a value using
            # parameter assignment as documented in the script usage.
            eval "${argument%%=*}=\"\${argument#*=} \""
          ;;

          -h|--help)
            usage
            return 0
          ;;

          -n)
            DRY_RUN="X"
          ;;

          *)
            die "unsupported argument '$argument'"
          ;;
        esac
    done

    PLATFORM="$(make -f Makefile.in platform)"
    test -n "$PLATFORM"

    configure_compat
    configure_make
    configure_sha256
    configure_cc
    configure_cflags_ldflags

    for var in CC CFLAGS LDFLAGS GMAKE MAKE SHA256; do
        eval "test -z \"\$$var\" || echo $var = \$$var"
    done

    test -z "$DRY_RUN" || return 0

    generate_makefile > Makefile.new

    if [ -e Makefile ] && diff -u Makefile Makefile.new; then
        echo
        echo "$SELF: Makefile contents unchanged"
        rm -f Makefile.new
    else
        mv -f Makefile.new Makefile
        chmod u-w+rx Makefile
        echo "--"
        echo "$SELF: configuration written to Makefile"
    fi
}

main "$@"
