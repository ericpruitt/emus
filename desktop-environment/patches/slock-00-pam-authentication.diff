Title: P.A.M. Support
Author: Eric Pruitt (https://www.codevat.com/, https://github.com/ericpruitt/)

This patch adds support for PAM to slock. Although it was originally based on a
[patch written by Jan Christoph Ebersbach][jce-pam-auth], it has since been
refactored. This patch notably differs from Jan's in the following ways:

- PAM is automatically used as the fallback when the user does not appear to
  have a hash on the local system.
- The function used to converse with PAM does not kill the screen locker if
  there is a memory allocation failure.
- C preprocessor guards have been added so slock can still be compiled when
  this patch is applied regardless of whether or not the PAM development
  libraries are available.
- The build configuration has been modified to support a "USE_PAM" variable
  that can be used to toggle build support for PAM; when it is empty or unset,
  slock is compiled without PAM while any other value compiles slock with PAM.

Other changes include:

- A new, intermediate color will be shown when slock is waiting on PAM. Its
  index is `PAM_WAIT`.
- With this patch, slock drops privileges using the return values of
  _getuid(2)_ and _getgid(2)_ instead of constants in "config.h".

  [jce-pam-auth]: http://tools.suckless.org/slock/patches/pam_auth

diff --git config.mk config.mk
index 74429ae..54d86ac 100644
--- config.mk
+++ config.mk
@@ -12,10 +12,10 @@ X11LIB = /usr/X11R6/lib
 
 # includes and libs
 INCS = -I. -I/usr/include -I${X11INC}
-LIBS = -L/usr/lib -lc -lcrypt -L${X11LIB} -lX11 -lXext -lXrandr
+LIBS = -L/usr/lib -lc -lcrypt -L${X11LIB} -lX11 -lXext -lXrandr $(if $(USE_PAM),-lpam,)
 
 # flags
-CPPFLAGS = -DVERSION=\"${VERSION}\" -D_DEFAULT_SOURCE -DHAVE_SHADOW_H
+CPPFLAGS = -DVERSION=\"${VERSION}\" -D_DEFAULT_SOURCE -DHAVE_SHADOW_H $(if $(USE_PAM),-DHAVE_PAM_AUTH,)
 CFLAGS = -std=c99 -pedantic -Wall -Os ${INCS} ${CPPFLAGS}
 LDFLAGS = -s ${LIBS}
 COMPATSRC = explicit_bzero.c
diff --git slock.c slock.c
index d55eb3d..f44366d 100644
--- slock.c
+++ slock.c
@@ -28,6 +28,7 @@ enum {
 	INIT,
 	INPUT,
 	FAILED,
+	PAM_WAIT,
 	NUMCOLS
 };
 
@@ -45,18 +46,107 @@ struct xrandr {
 };
 
 #include "config.h"
+static Display *dpy = NULL;
+static struct lock **locks = NULL;
+static int nscreens = 0;
+static char passwd[256];
 
 static void
-die(const char *errstr, ...)
+setcolor(int color)
+{
+	for (int screen = 0; screen < nscreens; screen++) {
+		XSetWindowBackground(
+			dpy,
+			locks[screen]->win,
+			locks[screen]->colors[color]
+		);
+		XClearWindow(dpy, locks[screen]->win);
+	}
+}
+
+static void
+err(const char *errstr, ...)
 {
 	va_list ap;
 
 	va_start(ap, errstr);
 	vfprintf(stderr, errstr, ap);
 	va_end(ap);
-	exit(1);
 }
 
+#define die(...) (err(__VA_ARGS__), exit(1))
+
+#ifdef HAVE_PAM_AUTH
+#include <security/pam_appl.h>
+#include <security/pam_misc.h>
+#define pam_supported 1
+
+static int pam_conv(int num_msg, const struct pam_message **msg,
+  struct pam_response **resp, void *appdata_ptr) {
+
+	struct pam_response *resp_msg;
+	char *password = NULL;
+	int status = PAM_CONV_ERR;
+
+	for (int i = 0; i < num_msg; i++) {
+		if (msg[i]->msg_style == PAM_PROMPT_ECHO_OFF &&
+				strncmp(msg[i]->msg, "Password: ", 10) == 0) {
+			if ((resp_msg = malloc(sizeof(struct pam_response))) &&
+			    (password = malloc(strlen(passwd) + 1))) {
+				strcpy(password, passwd);
+				resp_msg->resp_retcode = 0;
+				resp_msg->resp = password;
+				resp[i] = resp_msg;
+				status = PAM_SUCCESS;
+			} else {
+				perror("Unable to allocate memory");
+				free(resp_msg);
+				free(password);
+				status = PAM_SYSTEM_ERR;
+				break;
+			}
+		}
+	}
+
+	return status;
+}
+
+static struct pam_conv conversation = {
+	pam_conv,
+	NULL
+};
+
+static int pam_password_ok(char *password)
+{
+	pam_handle_t *handle;
+	int status;
+	struct passwd* pw;
+
+	errno = 0;
+	if (!(pw = getpwuid(getuid()))) {
+		err("slock: getpwuid: %s\n",
+		    errno ? strerror(errno) : "user entry not found");
+		return 0;
+	}
+
+	setcolor(PAM_WAIT);
+	XSync(dpy, 0);
+	status = pam_start("login", pw->pw_name, &conversation, &handle);
+	status = (status != PAM_SUCCESS) ? status : pam_authenticate(handle, 0);
+	status = (status != PAM_SUCCESS) ? status : pam_acct_mgmt(handle, 0);
+
+	if (status != PAM_SUCCESS) {
+		err("slock: %s\n",  pam_strerror(handle, status));
+	}
+
+	pam_end(handle, status);
+	return status == PAM_SUCCESS;
+}
+#else
+#define pam_password_ok(...) (0)
+#define pam_supported 0
+#endif
+
 #ifdef __linux__
 #include <fcntl.h>
 #include <linux/oom.h>
@@ -93,18 +183,21 @@ gethash(void)
 	errno = 0;
 	if (!(pw = getpwuid(getuid()))) {
 		if (errno)
-			die("slock: getpwuid: %s\n", strerror(errno));
+			err("slock: getpwuid: %s\n", strerror(errno));
 		else
-			die("slock: cannot retrieve password entry\n");
+			err("slock: cannot retrieve password entry\n");
+		return NULL;
 	}
 	hash = pw->pw_passwd;
 
 #if HAVE_SHADOW_H
 	if (!strcmp(hash, "x")) {
 		struct spwd *sp;
-		if (!(sp = getspnam(pw->pw_name)))
-			die("slock: getspnam: cannot retrieve shadow entry. "
+		if (!(sp = getspnam(pw->pw_name))) {
+			err("slock: getspnam: cannot retrieve shadow entry. "
 			    "Make sure to suid or sgid slock.\n");
+			return NULL;
+		}
 		hash = sp->sp_pwdp;
 	}
 #else
@@ -125,11 +218,10 @@ gethash(void)
 }
 
 static void
-readpw(Display *dpy, struct xrandr *rr, struct lock **locks, int nscreens,
-       const char *hash)
+readpw(struct xrandr *rr, int nscreens, const char *hash)
 {
 	XRRScreenChangeNotifyEvent *rre;
-	char buf[32], passwd[256], *inputhash;
+	char buf[32], *inputhash;
 	int num, screen, running, failure, oldc;
 	unsigned int len, color;
 	KeySym ksym;
@@ -160,11 +252,13 @@ readpw(Display *dpy, struct xrandr *rr, struct lock **locks, int nscreens,
 			case XK_Return:
 				passwd[len] = '\0';
 				errno = 0;
-				if (!(inputhash = crypt(passwd, hash)))
-					fprintf(stderr, "slock: crypt: %s\n", strerror(errno));
-				else
-					running = !!strcmp(inputhash, hash);
-				if (running) {
+				if (hash) {
+					if (!(inputhash = crypt(passwd, hash)))
+						fprintf(stderr, "slock: crypt: %s\n", strerror(errno));
+					else
+						running = !!strcmp(inputhash, hash);
+				}
+				if (running && (running = !pam_password_ok(passwd))) {
 					XBell(dpy, 100);
 					failure = 1;
 				}
@@ -189,12 +283,7 @@ readpw(Display *dpy, struct xrandr *rr, struct lock **locks, int nscreens,
 			}
 			color = len ? INPUT : ((failure || failonclear) ? FAILED : INIT);
 			if (running && oldc != color) {
-				for (screen = 0; screen < nscreens; screen++) {
-					XSetWindowBackground(dpy,
-					                     locks[screen]->win,
-					                     locks[screen]->colors[color]);
-					XClearWindow(dpy, locks[screen]->win);
-				}
+				setcolor(color);
 				oldc = color;
 			}
 		} else if (rr->active && ev.type == rr->evbase + RRScreenChangeNotify) {
@@ -220,7 +309,7 @@ readpw(Display *dpy, struct xrandr *rr, struct lock **locks, int nscreens,
 }
 
 static struct lock *
-lockscreen(Display *dpy, struct xrandr *rr, int screen)
+lockscreen(struct xrandr *rr, int screen)
 {
 	char curs[] = {0, 0, 0, 0, 0, 0, 0, 0};
 	int i, ptgrab, kbgrab;
@@ -306,14 +395,8 @@ usage(void)
 int
 main(int argc, char **argv) {
 	struct xrandr rr;
-	struct lock **locks;
-	struct passwd *pwd;
-	struct group *grp;
-	uid_t duid;
-	gid_t dgid;
 	const char *hash;
-	Display *dpy;
-	int s, nlocks, nscreens;
+	int s, nlocks;
 
 	ARGBEGIN {
 	case 'v':
@@ -323,26 +406,17 @@ main(int argc, char **argv) {
 		usage();
 	} ARGEND
 
-	/* validate drop-user and -group */
-	errno = 0;
-	if (!(pwd = getpwnam(user)))
-		die("slock: getpwnam %s: %s\n", user,
-		    errno ? strerror(errno) : "user entry not found");
-	duid = pwd->pw_uid;
-	errno = 0;
-	if (!(grp = getgrnam(group)))
-		die("slock: getgrnam %s: %s\n", group,
-		    errno ? strerror(errno) : "group entry not found");
-	dgid = grp->gr_gid;
-
 #ifdef __linux__
 	dontkillme();
 #endif
 
 	hash = gethash();
 	errno = 0;
-	if (!crypt("", hash))
-		die("slock: crypt: %s\n", strerror(errno));
+	if (!hash && !pam_supported)
+		die("slock: no hash found, and PAM support not enabled\n");
+	if (hash && !crypt("", hash) && !pam_supported)
+		die("slock: PAM support not enabled, and crypt rejected hash: %s\n",
+		    strerror(errno));
 
 	if (!(dpy = XOpenDisplay(NULL)))
 		die("slock: cannot open display\n");
@@ -350,9 +424,9 @@ main(int argc, char **argv) {
 	/* drop privileges */
 	if (setgroups(0, NULL) < 0)
 		die("slock: setgroups: %s\n", strerror(errno));
-	if (setgid(dgid) < 0)
+	if (setgid(getgid()) < 0)
 		die("slock: setgid: %s\n", strerror(errno));
-	if (setuid(duid) < 0)
+	if (setuid(getuid()) < 0)
 		die("slock: setuid: %s\n", strerror(errno));
 
 	/* check for Xrandr support */
@@ -363,7 +437,7 @@ main(int argc, char **argv) {
 	if (!(locks = calloc(nscreens, sizeof(struct lock *))))
 		die("slock: out of memory\n");
 	for (nlocks = 0, s = 0; s < nscreens; s++) {
-		if ((locks[s] = lockscreen(dpy, &rr, s)) != NULL)
+		if ((locks[s] = lockscreen(&rr, s)) != NULL)
 			nlocks++;
 		else
 			break;
@@ -389,7 +463,7 @@ main(int argc, char **argv) {
 	}
 
 	/* everything is now blank. Wait for the correct password */
-	readpw(dpy, &rr, locks, nscreens, hash);
+	readpw(&rr, nscreens, hash);
 
 	return 0;
 }
