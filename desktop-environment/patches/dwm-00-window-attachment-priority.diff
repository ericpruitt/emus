Title: Window Attachment Priority
Author: Eric Pruitt (https://www.codevat.com/, https://github.com/ericpruitt/)

Adds an additional property named "priority" to window rule definitions. When a
new window is managed by dwm, its position in the window list is determined by
its priority: the higher the priority, the earlier in the list it is added. A
default priority must be specified in configuration header like so:

    static const int defaultpriority = 50;

When using the "zoom" function, a window cannot be zoomed above a window with a
higher priority.

--- a/dwm.c
+++ b/dwm.c
@@ -88,7 +88,7 @@ typedef struct Client Client;
 struct Client {
 	char name[256];
 	float mina, maxa;
-	int x, y, w, h;
+	int x, y, w, h, priority;
 	int oldx, oldy, oldw, oldh;
 	int basew, baseh, incw, inch, maxw, maxh, minw, minh;
 	int bw, oldbw;
@@ -140,6 +140,7 @@ typedef struct {
 	unsigned int tags;
 	int isfloating;
 	int monitor;
+	int priority;
 } Rule;
 
 /* function declarations */
@@ -148,6 +149,7 @@ static int applysizehints(Client *c, int *x, int *y, int *w, int *h, int interac
 static void arrange(Monitor *m);
 static void arrangemon(Monitor *m);
 static void attach(Client *c);
+static void attachbypriority(Client *c, int attachafterifequal);
 static void attachstack(Client *c);
 static void buttonpress(XEvent *e);
 static void checkotherwm(void);
@@ -299,6 +301,7 @@ applyrules(Client *c)
 		&& (!r->instance || strstr(instance, r->instance)))
 		{
 			c->isfloating = r->isfloating;
+			c->priority = r->priority ? r->priority : c->priority;
 			c->tags |= r->tags;
 			for (m = mons; m && m->num != r->monitor; m = m->next);
 			if (m)
@@ -408,6 +411,39 @@ attach(Client *c)
 }
 
 void
+attachbypriority(Client *c, int attachafterifequal) {
+	Client *k, *p = NULL;
+	if (c->isfloating || c->isfullscreen) {
+		attach(c);
+		return;
+	}
+
+	for (k = c->mon->clients; k; k = k->next) {
+		if (k->isfloating || k->isfullscreen || k == c) {
+			continue;
+		}
+		if ((c->priority > k->priority) ||
+		   ((c->priority == k->priority) && !attachafterifequal)) {
+			if (!p) {
+				attach(c);
+			} else {
+				c->next = p->next;
+				p->next = c;
+			}
+			return;
+		}
+		p = k;
+	}
+
+	if (p) {
+		c->next = NULL;
+		p->next = c;
+	} else {
+		attach(c);
+	}
+}
+
+void
 attachstack(Client *c)
 {
 	c->snext = c->mon->stack;
@@ -1039,6 +1075,7 @@ manage(Window w, XWindowAttributes *wa)
 	XWindowChanges wc;
 
 	c = ecalloc(1, sizeof(Client));
+	c->priority = defaultpriority;
 	c->win = w;
 	/* geometry */
 	c->x = c->oldx = wa->x;
@@ -1079,7 +1116,7 @@ manage(Window w, XWindowAttributes *wa)
 		c->isfloating = c->oldstate = trans != None || c->isfixed;
 	if (c->isfloating)
 		XRaiseWindow(dpy, c->win);
-	attach(c);
+	attachbypriority(c, 1);
 	attachstack(c);
 	XChangeProperty(dpy, root, netatom[NetClientList], XA_WINDOW, 32, PropModeAppend,
 	                (unsigned char *) &(c->win), 1);
@@ -1223,7 +1260,7 @@ void
 pop(Client *c)
 {
 	detach(c);
-	attach(c);
+	attachbypriority(c, 0);
 	focus(c);
 	arrange(c->mon);
 }
@@ -1437,7 +1474,7 @@ sendmon(Client *c, Monitor *m)
 	detachstack(c);
 	c->mon = m;
 	c->tags = m->tagset[m->seltags]; /* assign tags of target monitor */
-	attach(c);
+	attachbypriority(c, 1);
 	attachstack(c);
 	focus(NULL);
 	arrange(NULL);
