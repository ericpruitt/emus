#!/bin/sh
set -e -u

DRY_RUN=""
MAKEFILE="Makefile"
MAKEFILE_TEMPLATE="$MAKEFILE.in"
ONE_SHELL_TEST_RECIPE="$(printf "x:\n\tX=X\n\techo \$\$X\n")"
SELF="${0##*/}"

die()
{
    echo "$SELF: $1" >&2 && return 1
}

configure_sha256()
{
    test -z "${SHA256:=}" || return 0

    if command -v openssl >/dev/null 2>&1; then
        SHA256="openssl dgst -sha256"
    elif command -v sha256 >/dev/null 2>&1; then
        SHA256="sha256"
    elif command -v sha256sum >/dev/null 2>&1; then
        SHA256="sha256sum --tag"
    else
        die "unable to find command for SHA-256 hashing"
    fi
}

configure_make()
{
    # Check to see if "-B" is needed to make recipes execute each statement in
    # a separate shell.
    make="${MAKE:-make}"
    if [ -n "$(echo "$ONE_SHELL_TEST_RECIPE" | $make -s -j2 -f -)" ] &&
       [ -z "$(echo "$ONE_SHELL_TEST_RECIPE" | $make -s -j2 -f - -B)" ]; then
       MAKE="$make -B"
    fi

    : "${MAKE:=}"
    test "${GMAKE:=}" = " " && GMAKE="" && return

    # If GMAKE is set, verify that it's actually GNU Make.
    if [ -n "$GMAKE" ]; then
        $GMAKE -v 2>&1 | grep -q "GNU Make" || die "GMAKE is not GNU Make"
        return
    fi

    # If GMAKE is not set, try to find GNU Make.
    for gmake in "$MAKE" make gmake ""; do
        $gmake -v 2>&1 | grep -q "GNU Make" && break
    done

    test "$gmake" = "make" && GMAKE='$(MAKE)' || GMAKE="$gmake"
}

configure_cc()
{
    test -z "${CC:-}" || return 0
    CC="cc"

    case "$PLATFORM" in
      linux*)
        CC="$PWD/$($make -s -f "$MAKEFILE_TEMPLATE" musl-cc)"

        test ! -e "$CC" -a -z "$DRY_RUN" || return 0
        test -n "$GMAKE" || die "GNU Make needed for musl; set GMAKE or MAKE"
        test "$GMAKE" = '$(MAKE)' && make="make" || make="$GMAKE"

        echo "Building musl-cc..."
        $make -s -f "$MAKEFILE_TEMPLATE" CC="cc" musl
      ;;
    esac
}

configure_cflags_ldflags()
{
    if [ -z "${CFLAGS:-}" ] || [ -z "${LDFLAGS:-}" ]; then
        case "$PLATFORM: $(exec 2>&1; $CC -dumpspecs || $CC -v)" in
          darwin*)
            # Static compilation is not well-supported on macOS, so no
            # additional linker or compiler flags are added.
            _CFLAGS=""
            _LDFLAGS=""
          ;;

          freebsd*)
            _CFLAGS="-static"
            _LDFLAGS="-static"
          ;;

          *[!f]no-pie*|*clang*)
            _CFLAGS="-static -fno-pie -fPIC"
            _LDFLAGS="-static -no-pie"
          ;;

          *[!f]nopie*)
            _CFLAGS="-static -fno-pie -fPIC"
            _LDFLAGS="-static -nopie"
          ;;

          *)
            _CFLAGS="-static"
            _LDFLAGS="-static"
          ;;
        esac
    fi

    CFLAGS="-I\$(COMMON_PREFIX)/include ${CCOPTFLAGS:--O3} ${CFLAGS:-$_CFLAGS}"
    LDFLAGS="-L\$(COMMON_PREFIX)/lib ${LDFLAGS:-$_LDFLAGS}"
}

configure_quirks()
{
    test -z "${QUIRKS:-}" || return 0

    QUIRKS="$(
        test "$(uname)" != "Darwin" || echo macos
        test -n "$GMAKE" || echo no_gmake
        test "$(echo 'x:.;echo $(?D)' | ${MAKE:-make} -s -f-)" || echo no_qmd
    )"
}

usage()
{
    echo "Usage: $SELF [OPTION] [VARIABLE=[VALUE]]..."
    echo "Generate a Makefile configured for this platform."
    echo
    echo "Options:"
    echo "  -h  Display this text and exit."
    echo "  -n  Dry run; display the generated configuration without saving."
    echo
    echo "Variables:"
    echo "  CC          C compiler command"
    echo "  CCOPTFLAGS  Compiler optimization flags"
    echo "  CFLAGS      Compiler flags"
    echo "  LDFLAGS     Linker flags"
    echo
    echo "  GMAKE       GNU Make command"
    echo "  MAKE        POSIX-compatible Make command"
    echo "  QUIRKS      List of platform-specific portability quirks"
    echo "  SHA256      SHA-256 hashing command"
    echo
    echo "Environment Variables:"
    echo "  If any configurable variables are defined in the environment as"
    echo "  non-null strings, they will take precedence over the values that"
    echo "  would otherwise by generated by this script. To set these values"
    echo "  to null strings, use parameter variable assignment instead."
}

main()
{
    for argument in "$@"; do
        case "$argument" in
          CC=*|CCOPTFLAGS=*|CFLAGS=*|GMAKE=*|LDFLAGS=*|MAKE=*|QUIRKS=*|\
          SHA256=*)
            # The space after "}" makes it possible to null a value using
            # parameter assignment as documented in the script usage.
            eval "${argument%%=*}=\"\${argument#*=} \""
          ;;

          -h|--help)
            usage
            return 0
          ;;

          -n)
            DRY_RUN="X"
          ;;

          *)
            die "unsupported argument '$argument'"
          ;;
        esac
    done

    PLATFORM="$(echo $(uname)-$(uname -r) | tr A-Z a-z)"
    test -n "$PLATFORM"

    configure_make
    configure_sha256
    configure_cc
    configure_cflags_ldflags
    configure_quirks

    for var in CC CFLAGS LDFLAGS GMAKE MAKE QUIRKS SHA256; do
        eval "export $var; test -z \"\$$var\" || echo $var = \$$var"
    done

    test -z "$DRY_RUN" || return 0

    rm -f "$MAKEFILE"

    awk -f configure.awk \
        $(for quirk in $QUIRKS; do echo "-v $quirk=1"; done) \
        "$MAKEFILE_TEMPLATE" > "$MAKEFILE"

    chmod 400 "$MAKEFILE"
    echo "--"
    echo "$SELF: configuration written to $MAKEFILE"
}

main "$@"
