#!/bin/sh
# Usage: epgrep [--enhance] [--ps-options=...] [PS_ARGUMENT]...
#
# Enhanced pgrep (epgrep) is wrapper for pgrep(1) that adds a couple of new
# features when the "--enhance" is given as the first command line argument:
# - ps(1) is used to show detailed information about matching processes instead
#   of just their PIDs.
# - When there no other arguments, detailed information about all non-kernel
#   processes is shown.
#
# The option "--ps-options" is used to forward options to ps(1) when the output
# is being enhanced.
#
# If standard output is a terminal, "--enhance" is implied.

set -e -u
test -t 1 && enhance="x" || enhance=""
test "${1:-}" = "--enhance" && shift && enhance="x"

case "${1:-}" in
  --ps-options)
    ps_options="$2"
    shift 2
  ;;
  --ps-options=*)
    ps_options="${1#--ps-options=}"
    shift
  ;;
esac

test "$enhance" || exec pgrep "$@"

case "$*" in
  # When no arguments are given, show every non-kernel process.
  "")
    for pid in $(pgrep -v -x kthreadd); do
        test "$pid" -eq 2 -o "$pid" -eq "$$" && continue
        test -n "${pids:-}" && pids="$pids,$pid" || pids="-p $pid"
    done
  ;;

  # If the arguments are non-numeric, assume they're pgrep flags.
  *[!0-9\ ]*)
    # Get a list of PIDs that match the conditions and filter out this script's
    # PID.
    results="$(pgrep "$@" || test "$?" -eq 1)"
    for pid in $results; do
        test "$pid" -eq "$$" && continue
        test -n "${pids:-}" && pids="$pids,$pid" || pids="-p $pid"
    done

    if [ -z "${pids:-}" ]; then
        echo "${0##*/}: no processes matching the query \"$*\"" >&2
        exit 1
    fi
  ;;

  # If the args are numeric, assume they're PIDs.
  *)
    pids="$*"
  ;;
esac

COLUMNS="${COLUMNS:-$(tput cols 2>/dev/null || echo 80)}" \
exec ps ${ps_options:-} $pids
